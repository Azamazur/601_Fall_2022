{
  "hash": "099116835dc1b6368b04a68b00d77589",
  "result": {
    "markdown": "---\ntitle: \"Sarah McAlpine - Challenge 7\"\nauthor: \"Sarah McAlpine\"\ndesription: \"Homework Challenge 7\"\ndate: \"11/2/2022\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_7\n  - sarahmcalpine\n  - airbnb\n  - ggplot2\n  - summarytools\n  - treemap\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(summarytools)\nlibrary(treemap)\n\nknitr::opts_chunk$set(echo = TRUE)\n```\n:::\n\n\n## Adding Dimensions to Airbnb Data Visualization\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#initial read-in \nairbnb_orig <- read_csv(\"_data/AB_NYC_2019.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 48895 Columns: 16\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (5): name, host_name, neighbourhood_group, neighbourhood, room_type\ndbl  (10): id, host_id, latitude, longitude, price, minimum_nights, number_o...\ndate  (1): last_review\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\n#airbnb_clean$price <- replace(airbnb_clean$price, airbnb_clean$price == 0, NA)\n\nairbnb_medianpriced <- airbnb_orig %>%\n  filter(price>0) %>%\n  group_by(room_type, neighbourhood_group) %>%\n    summarize(median(price))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'room_type'. You can override using the\n`.groups` argument.\n```\n:::\n\n```{.r .cell-code}\n#airbnb_medianpriced\n\nairbnb_medianpriced %>%\ntreemap(room_type,\n        index= c(\"neighbourhood_group\", \"room_type\"),\n        vSize = \"median(price)\",\n        type = \"index\",\n        title = \"Median Listing Price by Neighborhood, Airbnb NYC 2019\"\n)\n```\n\n::: {.cell-output-display}\n![](SarahMcAlpine_hw7_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#try again, swapping room and neighborhood group\nairbnb_medianpriced %>%\ntreemap(room_type,\n        index= c(\"room_type\",\"neighbourhood_group\"),\n        vSize = \"median(price)\",\n        type = \"index\",\n        title = \"Median Listing Price by Neighborhood, Airbnb NYC 2019\"\n)\n```\n\n::: {.cell-output-display}\n![](SarahMcAlpine_hw7_files/figure-html/unnamed-chunk-2-2.png){width=672}\n:::\n:::\n\nThese treemaps tell a simple, predictable story. The data I'm using is too simple for this graph type. I think I'll try violin plots to see the range and density of prices, but I need to scale my data to those greater than zero and smaller than $1000.\n\n## Violin Plots\n\n::: {.cell}\n\n```{.r .cell-code}\nis_outlier <- function(x) {\n  return(x < quantile(x, 0.25) - 1.5 * IQR(x) | x > quantile(x, 0.75) + 1.5 * IQR(x))\n}\nairbnb_trim <- airbnb_orig %>%\n  filter(!is_outlier(price))\n\n#confirm decrease in rows\nairbnb_trim\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 45,923 × 16\n      id name      host_id host_…¹ neigh…² neigh…³ latit…⁴ longi…⁵ room_…⁶ price\n   <dbl> <chr>       <dbl> <chr>   <chr>   <chr>     <dbl>   <dbl> <chr>   <dbl>\n 1  2539 Clean & …    2787 John    Brookl… Kensin…    40.6   -74.0 Privat…   149\n 2  2595 Skylit M…    2845 Jennif… Manhat… Midtown    40.8   -74.0 Entire…   225\n 3  3647 THE VILL…    4632 Elisab… Manhat… Harlem     40.8   -73.9 Privat…   150\n 4  3831 Cozy Ent…    4869 LisaRo… Brookl… Clinto…    40.7   -74.0 Entire…    89\n 5  5022 Entire A…    7192 Laura   Manhat… East H…    40.8   -73.9 Entire…    80\n 6  5099 Large Co…    7322 Chris   Manhat… Murray…    40.7   -74.0 Entire…   200\n 7  5121 BlissArt…    7356 Garon   Brookl… Bedfor…    40.7   -74.0 Privat…    60\n 8  5178 Large Fu…    8967 Shunic… Manhat… Hell's…    40.8   -74.0 Privat…    79\n 9  5203 Cozy Cle…    7490 MaryEl… Manhat… Upper …    40.8   -74.0 Privat…    79\n10  5238 Cute & C…    7549 Ben     Manhat… Chinat…    40.7   -74.0 Entire…   150\n# … with 45,913 more rows, 6 more variables: minimum_nights <dbl>,\n#   number_of_reviews <dbl>, last_review <date>, reviews_per_month <dbl>,\n#   calculated_host_listings_count <dbl>, availability_365 <dbl>, and\n#   abbreviated variable names ¹​host_name, ²​neighbourhood_group,\n#   ³​neighbourhood, ⁴​latitude, ⁵​longitude, ⁶​room_type\n```\n:::\n\n```{.r .cell-code}\nairbnb_priced <- airbnb_orig %>%\n  filter(price>0, price<800) %>%\n  group_by(room_type, neighbourhood_group) \n\nairbnb_priced %>%  \n  ggplot(aes(x=room_type, y=price, fill=neighbourhood_group)) + \n  geom_violin(width = 1, size = .5, \n              scale = \"area\",\n              trim = TRUE)+\n  coord_flip()+\n  xlab(\"room type\")\n```\n\n::: {.cell-output-display}\n![](SarahMcAlpine_hw7_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n```{.r .cell-code}\nairbnb_priced %>% \n  filter(price<300) %>%\n  ggplot(aes(x=room_type, y=price, fill=neighbourhood_group)) + \n  geom_violin(width = 1, size = .5, \n              scale = \"area\",\n              trim = TRUE)+\n  #coord_flip()+\n  xlab(\"room type\")+\n  facet_wrap(vars(room_type), scales = \"free_x\")\n```\n\n::: {.cell-output-display}\n![](SarahMcAlpine_hw7_files/figure-html/unnamed-chunk-3-2.png){width=672}\n:::\n:::\n\nThis violin plot shows the density of prices of each rental, by both room type and by borough, but the scale is so various that it's hard to really compare. Perhaps 3 separate graphs would show this better, or even a lower max value. I could also try this again after removing outliers--I imagine that would be much clearer.\n\n## The Violin Plots Work Better without Outliers\n\n::: {.cell}\n\n```{.r .cell-code}\nairbnb_trim %>% \n  ggplot(aes(x=room_type, y=price, fill=neighbourhood_group)) + \n  geom_violin(width = 1, size = .5, \n              scale = \"area\",\n              trim = TRUE)+\n  #coord_flip()+\n  xlab(\"room type\")+\n  facet_wrap(vars(room_type), scales = \"free_x\")+\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](SarahMcAlpine_hw7_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n## Grouped Bars\n\n::: {.cell}\n\n```{.r .cell-code}\nairbnb_medianpriced <- airbnb_orig %>%\n  filter(price>0) %>%\n  group_by(room_type, neighbourhood_group) %>%\n    summarize(median(price), \"median_price\") %>%\n  rename(\"median_price\" , \"median(price)\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'room_type'. You can override using the\n`.groups` argument.\n```\n:::\n\n::: {.cell-output .cell-output-error}\n```\nError in `chr_as_locations()`:\n! Can't rename columns that don't exist.\n✖ Column `median_price` doesn't exist.\n```\n:::\n\n```{.r .cell-code}\n#how do I do this next bit without starting a new pipe?\n\nairbnb_medianpriced <- airbnb_medianpriced %>%\n  rename(median_price = \"median(price)\") \n\nairbnb_medianpriced\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 15 × 3\n# Groups:   room_type [3]\n   room_type       neighbourhood_group median_price\n   <chr>           <chr>                      <dbl>\n 1 Entire home/apt Bronx                        100\n 2 Entire home/apt Brooklyn                     145\n 3 Entire home/apt Manhattan                    191\n 4 Entire home/apt Queens                       120\n 5 Entire home/apt Staten Island                100\n 6 Private room    Bronx                         54\n 7 Private room    Brooklyn                      65\n 8 Private room    Manhattan                     90\n 9 Private room    Queens                        60\n10 Private room    Staten Island                 50\n11 Shared room     Bronx                         40\n12 Shared room     Brooklyn                      36\n13 Shared room     Manhattan                     69\n14 Shared room     Queens                        37\n15 Shared room     Staten Island                 30\n```\n:::\n\n```{.r .cell-code}\nairbnb_medianpriced %>%\n  ggplot(aes(x = room_type, y = median_price, fill = neighbourhood_group)) +\n  geom_bar(position= \"dodge\", stat = \"identity\") +\n  xlab(\"room type\") +\n  ylab(\"median price per night\")+\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](SarahMcAlpine_hw7_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n```{.r .cell-code}\nairbnb_medianpriced %>%\n  ggplot(aes(x = reorder(neighbourhood_group, +median_price), y = median_price, fill = room_type)) +\n  geom_bar(position= \"dodge\", stat = \"identity\")+\n  xlab(\"borough\")+\n  ylab(\"median price per night\")+\n  ggtitle(\"Median NYC Airbnb Prices 2019, by Room Type and Borough\")\n```\n\n::: {.cell-output-display}\n![](SarahMcAlpine_hw7_files/figure-html/unnamed-chunk-5-2.png){width=672}\n:::\n:::\n\nThese last two graphs show the clear distinctions among the median prices by room type, and while both show the differences across boroughs, the final graph tells the clearest story. I couldn't figure out how to reorder the boroughs for the horizontal bar plot--that may make it easier to see the 5 boroughs in relation to one another. Can anyone help with that?\n\n::: {.cell}\n\n```{.r .cell-code}\nairbnb_quantiles<-airbnb_orig%>%\n  filter(price>0)%>%\n  group_by(room_type) %>%\n  summarize(quantile(price, na.rm=TRUE))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'room_type'. You can override using the\n`.groups` argument.\n```\n:::\n\n```{.r .cell-code}\n# i coded this at 9pm\nairbnb_orig %>%\n  group_by(room_type)%>%\n  #how to rename a column within a pipe? maybe this is why prof Rolfe says to do it while tidying, in the read-in chunk\n  ggplot(aes(x=neighbourhood_group, y=price)) +\n  geom_point(alpha=.1, size=10)\n```\n\n::: {.cell-output-display}\n![](SarahMcAlpine_hw7_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\nIn this next section of code, I use the `is_outlier` function. <strong>I'm psyched I got that to work!</strong>\n\n::: {.cell}\n\n```{.r .cell-code}\nairbnb_trim%>%\n group_by(room_type, neighbourhood_group)%>%\n  ggplot(aes(x=neighbourhood_group, y=price)) +\n  geom_point(alpha=.5, size=5)+\n # theme_minimal()+\n  facet_wrap(\"room_type\")+\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](SarahMcAlpine_hw7_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n```{.r .cell-code}\n #+ labs(style=\"dodge\")\n\nairbnb_trim%>%\n group_by(room_type, neighbourhood_group)%>%\n  ggplot(aes(x=neighbourhood_group, y=price)) +\n  geom_point(alpha=.5, size=5)+\n # theme_minimal()+\n  facet_wrap(\"room_type\")+\n  geom_text(aes(\"neighbourhood_group\", label = price),\n            position = position_dodge(width=1))\n```\n\n::: {.cell-output-display}\n![](SarahMcAlpine_hw7_files/figure-html/unnamed-chunk-7-2.png){width=672}\n:::\n:::\n\n## Box Plot Over Geom_Point\n\n::: {.cell}\n\n```{.r .cell-code}\nairbnb_trim%>%\n group_by(room_type, neighbourhood_group)%>%\n  ggplot(aes(x=neighbourhood_group, y=price)) +\n  geom_point(alpha=.08, size=5, color = \"#00A699\")+\n  facet_wrap(\"room_type\")+\n  scale_x_discrete(guide = guide_axis(n.dodge=2))+\n  labs(x=\"Boroughs\",y=\"price per night\", title = \"NYC Airbnb Rental Prices 2019 by Borough\")+\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](SarahMcAlpine_hw7_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n\n```{.r .cell-code}\nairbnb_trim%>%\n group_by(room_type, neighbourhood_group)%>%\n  ggplot(aes(x=neighbourhood_group, y=price)) +\n  geom_point(alpha=.08, size=5, color = \"#00A699\")+\n  facet_wrap(\"room_type\")+\n  scale_x_discrete(guide = guide_axis(n.dodge=2))+\n  labs(x=\"Boroughs\",y=\"price per night\", title = \"NYC Airbnb Rental Prices 2019 by Borough\")+\n  theme_light()+\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](SarahMcAlpine_hw7_files/figure-html/unnamed-chunk-8-2.png){width=672}\n:::\n:::\n\nWow. This is an incredible improvement with the single line:\n`+  geom_boxplot()`. I now have a very good idea what prices these three types of rentals go for across the boroughs. What if I add neighborhoods, and facet_wrap?\n  \n\n",
    "supporting": [
      "SarahMcAlpine_hw7_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}