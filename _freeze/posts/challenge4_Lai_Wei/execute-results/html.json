{
  "hash": "f44489ba537431032e0070d91f1b017d",
  "result": {
    "markdown": "---\ntitle: \"Challenge 4\"\nauthor: \"Lai Wei\"\ndesription: \"More data wrangling: pivoting\"\ndate: \"11/09/2022\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_4\n  - abc_poll\n  - eggs\n  - fed_rates\n  - hotel_bookings\n  - debt\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(readxl)\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1)  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2)  tidy data (as needed, including sanity checks)\n3)  identify variables that need to be mutated\n4)  mutate variables and sanity check all mutations\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n-   abc_poll.csv ⭐\n-   poultry_tidy.xlsx or organiceggpoultry.xls⭐⭐\n-   FedFundsRate.csv⭐⭐⭐\n-   hotel_bookings.csv⭐⭐⭐⭐\n-   debt_in_trillions.xlsx ⭐⭐⭐⭐⭐\n\n\n::: {.cell}\n\n```{.r .cell-code}\nFed <- read_csv(\"D:/Umass Amherst/DACSS 601/601_Fall_2022/posts/_data/eggs_tidy.csv\")\nFed\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 120 × 6\n   month      year large_half_dozen large_dozen extra_large_half_dozen extra_l…¹\n   <chr>     <dbl>            <dbl>       <dbl>                  <dbl>     <dbl>\n 1 January    2004             126         230                    132       230 \n 2 February   2004             128.        226.                   134.      230 \n 3 March      2004             131         225                    137       230 \n 4 April      2004             131         225                    137       234.\n 5 May        2004             131         225                    137       236 \n 6 June       2004             134.        231.                   137       241 \n 7 July       2004             134.        234.                   137       241 \n 8 August     2004             134.        234.                   137       241 \n 9 September  2004             130.        234.                   136.      241 \n10 October    2004             128.        234.                   136.      241 \n# … with 110 more rows, and abbreviated variable name ¹​extra_large_dozen\n```\n:::\n:::\n\n\n### Briefly describe the data\n\n## Tidy Data (as needed)\n\nUsing colnames() function to see each colnames' catagory. \n\n::: {.cell}\n\n```{.r .cell-code}\nFed %>% \n  colnames()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"month\"                  \"year\"                   \"large_half_dozen\"      \n[4] \"large_dozen\"            \"extra_large_half_dozen\" \"extra_large_dozen\"     \n```\n:::\n:::\n\nThey look good enough to be understood. I will leave them like that. \n\n\n## Identify variables that need to be mutated\n\nUsing mutate() function to create a new colname showing the total amount of dozen in each month. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nFed_total <- mutate(Fed, total = large_half_dozen + large_dozen + extra_large_half_dozen + extra_large_dozen) \nFed_total\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 120 × 7\n   month      year large_half_dozen large_dozen extra_large_half…¹ extra…² total\n   <chr>     <dbl>            <dbl>       <dbl>              <dbl>   <dbl> <dbl>\n 1 January    2004             126         230                132     230   718 \n 2 February   2004             128.        226.               134.    230   719.\n 3 March      2004             131         225                137     230   723 \n 4 April      2004             131         225                137     234.  728.\n 5 May        2004             131         225                137     236   729 \n 6 June       2004             134.        231.               137     241   743.\n 7 July       2004             134.        234.               137     241   745 \n 8 August     2004             134.        234.               137     241   745 \n 9 September  2004             130.        234.               136.    241   740.\n10 October    2004             128.        234.               136.    241   738.\n# … with 110 more rows, and abbreviated variable names ¹​extra_large_half_dozen,\n#   ²​extra_large_dozen\n```\n:::\n:::\n\nUsing summarise function to calculate the total number of each year. \n\n::: {.cell}\n\n```{.r .cell-code}\ngroup_by(Fed_total,year) %>% \n  summarise(Total = sum(total))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 2\n    year  Total\n   <dbl>  <dbl>\n 1  2004  8805.\n 2  2005  8862 \n 3  2006  8867.\n 4  2007  9018.\n 5  2008 10226 \n 6  2009 11046 \n 7  2010 10968.\n 8  2011 10974.\n 9  2012 10997.\n10  2013 11084.\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}