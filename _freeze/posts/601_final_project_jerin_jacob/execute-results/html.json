{
  "hash": "8f5f47a3ef216448840cc863eff32920",
  "result": {
    "markdown": "---\ntitle: \"601 Final Project\"\nauthor: \"Jerin Jacob\"\neditor: visual\ndescription: \"A study on the crime data of Massachusetts state\"\noutput: distill::distill_article\ndate: \"08/22/2022\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  _final_project_601\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(readr)\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(hrbrthemes)\nlibrary(ggplot2)\nlibrary(tidyr)\nlibrary(plotly)\n\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Introduction\n\nThere are two main types of safety concerns for any living species on earth. One is natural calamities which are obviously uncontrollable, and the second is man-made. The man-made safety related problems can be reduced or controlled if we study it properly and take actions accordingly. Among the man- made safety issues, crimes are always on the top of the list. The study of crime data will give us insights on how to not be a victim, by choosing a place that is less prone to a crime activities. So I decided to take the crime dataset of Massachusetts state and study on it to see if a person chooses to be in a particular location in a county at a specific time of the day, whether it will be safe or not. I am trying to compare the numbers of different counties in the state.\n\n## Data\n\nThis is a study on crime data of Massachusetts states. The dataset is a county based number of crimes at a location at a specific time of the day. The data is been taken from the public website of police department. Eventhough the data can be downloaded for the past years, I decided to take the data for 2021 as it is the most recent data. The data from police department had only the number of crimes at a location at a time of the day. If we take just the number of crime as such without considering other factors like the population or population density of the county, the analysis will be incomplete. So as an initial study, I decided to take the county-wise population data from the census 2020 and do the study on crime data as a function relative to the population of the county of occurance.\n\n### Reading the Data:\n\nAs there are 14 counties in Massachusetts, my data contains 14 separate county files to be read along with the population data of Massachusetts counties.\n\n#### Reading population Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nma_population <- read_csv('_data/601_final_project_jerin_jacob/MA_population.csv', col_names = c(\"Number\", \"County\", \"Population\"))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: '_data/601_final_project_jerin_jacob/MA_population.csv' does not exist in current working directory ('/Users/jerinjacob/Documents/GitHub/601_Fall_2022/posts').\n```\n:::\n\n```{.r .cell-code}\nma_population$County <- word(ma_population$County, 1)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in vctrs::vec_recycle_common(string = string, start = start, end = end): object 'ma_population' not found\n```\n:::\n\n```{.r .cell-code}\nma_population <- ma_population[ -c(1) ]\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'ma_population' not found\n```\n:::\n\n```{.r .cell-code}\nma_population\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'ma_population' not found\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfilepath <- \"_data/601_final_project_jerin_jacob/\"\ncsv_file_names <- list.files(path = filepath, pattern = \"_2021*\")\n#csv_file_names\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nread_crimes<-function(file_name){\n  x<-unlist(str_split(file_name, pattern=\"[[:punct:]]\", n=3))\n  read_csv(paste0(filepath, file_name),\n           skip = 8, \n           col_names = c(\"Location\",\"6-9pm\",\"9-12pm\",\"12-3am\",\"3-6am\",\"6-9am\",\"9-12noon\",\"12-3pm\",\"3-6pm\"))%>%\n             mutate(County = x[1],\n                    Year = x[2])\n}\ncounties<-\n  purrr::map_dfr(csv_file_names, read_crimes) %>%\n  select(`Location`, `12-3am`, `3-6am`,  `6-9am`, `9-12noon`, `12-3pm`, `3-6pm`, `6-9pm`, `9-12pm`, `County`, `Year`)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `select()`:\n! Can't subset columns that don't exist.\nâœ– Column `Location` doesn't exist.\n```\n:::\n\n```{.r .cell-code}\ncounties\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'counties' not found\n```\n:::\n\n```{.r .cell-code}\n#dim(counties)\n```\n:::\n\n\n##Number of crimes per 100,000 residents\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\nfig <- plot_ly(\n  type = \"indicator\",\n  mode = \"gauge+number+delta\",\n  value = 3211.166\t,\n  title = list(text = \"Crime Rate\", font = list(size = 20)),\n  delta = list(reference = 2350, increasing = list(color = \"RebeccaPurple\")),\n  gauge = list(\n    axis = list(range = list(NULL, 8000), tickwidth = 1, tickcolor = \"darkblue\"),\n    bar = list(color = \"darkblue\"),\n    bgcolor = \"yellow\",\n    borderwidth = 2,\n    bordercolor = \"gray\",\n    steps = list(\n      list(range = c(0, 2350), color = \"green\"),\n      list(range = c(2350, 4000), color = \"royalblue\"), \n      list(range = c(4000, 6000), color = \"orange\"),\n      list(range = c(6000, 8000), color = \"red\")),\n    threshold = list(\n      line = list(color = \"black\", width = 4),\n      thickness = 0.75,\n      value = 7000))) \nfig <- fig %>%\n  layout(\n    margin = list(l=20,r=30),\n    paper_bgcolor = \"lavender\",\n    font = list(color = \"darkblue\", family = \"Arial\"))\n\nfig\n\n\n\n``\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: attempt to use zero-length variable name\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvals <- county_cr\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'county_cr' not found\n```\n:::\n\n```{.r .cell-code}\ngauge_plot <- function(vals, breaks=c(0,2000,6000,8000), ncol= NULL) {\n    require(ggplot2)\n    require(dplyr)\n    require(tidyr)\n    \n    if (!is.data.frame(vals)) stop(\"Vals must be a dataframe\")\n    if (!dim(vals)[2]==2) stop(\"Vals must have two columns\")\n    if (!is.numeric(vals$Crime_rate)) stop(\"Dataframe variable pos must be numeric\")\n    \n    \n    # function to generate polygons\n    get_poly <- function(a,b,r1=0.5,r2=1.0) {\n        th.start <- pi*(1-a/100)\n        th.end <- pi*(1-b/100)\n        th <- seq(th.start,th.end,length=100)\n        x <- c(r1*cos(th),rev(r2*cos(th)))\n        y <- c(r1*sin(th),rev(r2*sin(th)))\n        df <- data.frame(x,y)\n        return(df)\n    }\n    \n    \n    # create the segments based on the breaks\n    segments <- list()\n    seg_names <- tibble(x = c(\"a\", \"c\", \"e\"), y = c(\"b\", \"d\" ,\"f\"))\n    \n    for(n in 1:3){\n        i <-breaks[n]\n        j <-breaks[n+1]\n        df <- get_poly(i, j)       \n        names(df) <- seg_names[n,]\n        segments$df[[n]] <- df\n    }\n\n    dfs <- bind_cols(segments)\n\n    # create set of segments for each metric \n    pnt <- tibble()\n    for (name in vals$County){\n        pnt[1:nrow(dfs), name] <- name\n    }\n    \n    dfp <- dfs %>% \n        cbind(pnt) %>% \n        pivot_longer(-c(a:f), names_to = \"County\") %>% \n        select(-value)\n    \n    # generate the needles\n    needles <- list()\n    for(p in 1:nrow(vals)){\n        i <-vals$Crime_rate[p] - 1\n        j <-vals$Crime_rate[p] + 1\n        r1 <- 0.2\n        df <- get_poly(i, j, r1)  \n        df$County <- vals$County[p]\n        needles$df[[p]] <- df\n    }\n    \n    dfn <- bind_rows(needles)\n    \n    \n    # graph\n    ggplot()+\n        geom_polygon(data=dfp, aes(a,b), fill=\"red\")+\n        geom_polygon(data=dfp, aes(c,d), fill=\"gold\")+\n        geom_polygon(data=dfp, aes(e,f), fill=\"forestgreen\")+\n        geom_polygon(data=dfn, aes(x,y))+\n        geom_text(data=as.data.frame(breaks), size=3, fontface=\"bold\", vjust=0,\n                  aes(x=1.05*cos(pi*(1-breaks/100)),y=1.05*sin(pi*(1-breaks/100)),label=breaks))+\n        geom_text(data=vals, aes(x=0,y=0), label=paste0(vals$Crime_rate,\"%\"), vjust=0, size=4, fontface=\"bold\")+\n        coord_fixed()+\n        theme_bw()+\n        theme(axis.text=element_blank(),\n              axis.title=element_blank(),\n              axis.ticks=element_blank(),\n              panel.grid=element_blank(),\n              panel.border=element_blank()) +\n        facet_wrap(~metric, strip.position = \"bottom\", ncol = ncol) +\n        labs(title = \"Multiple Gauge Plots w/ Facet Wrap\")\n}\ngauge_plot(county_crime_rate)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in is.data.frame(vals): object 'county_crime_rate' not found\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nCounty_crime_total <- filter(counties, Location == \"All Location Types\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in filter(counties, Location == \"All Location Types\"): object 'counties' not found\n```\n:::\n\n```{.r .cell-code}\n#head(County_crime_total)\n#head(ma_population)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nCounty_crime_total %>%\n  left_join(ma_population,by= \"County\")%>%\n  mutate(across(c(2:9),\n           .fns = ~./(Population/100000)))%>%\n  pivot_longer(cols = (ends_with(\"am\") | ends_with(\"pm\")) | ends_with(\"noon\"), names_to = \"Time\", values_to = \"Crime_Rate\") %>%\n  group_by(Time, County) %>%\n \n  ggplot(aes(x = County, y = Crime_Rate, fill = Time)) + \n    geom_bar(stat = \"identity\", position = position_dodge(0.9)) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in left_join(., ma_population, by = \"County\"): object 'County_crime_total' not found\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nCounty_crime_total %>%\n  left_join(ma_population,by= \"County\")%>%\n  mutate(across(c(2:9),\n           .fns = ~./(Population/100000)))%>%\n  pivot_longer(cols = (ends_with(\"am\") | ends_with(\"pm\")) | ends_with(\"noon\"), names_to = \"Time\", values_to = \"Crime_Rate\") %>%\n  group_by(Time, County) %>%\n  \n  ggplot( aes(x=Time, y=Crime_Rate, group=County, color=County)) +\n    geom_line()\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in left_join(., ma_population, by = \"County\"): object 'County_crime_total' not found\n```\n:::\n:::\n\n\n### Understanding the Data:\n\nThe population data is a clean data that has 14 rows of each county and the population.\n\nThe crime data contains 54 rows and 11 columns for each county files. 54 rows are different location types in the county categorised as where any crime can possibly occur.\n\n### Sanity Check:\n\nIn the dataset, there is a row for 'All Location Types'. I expected that to be same as the sum of all other Locations but it was not. This could be due to either data entry errors or overlapping/duplication of data in Locations with similar names. I could find 6 such Locations that duplicated. 'Commercial', 'Educational Facility', 'Government/Public Building and other', 'Road/Parking/Camps', 'Field/Woods/Waterways/Camps' and 'Construction/Industrial/Farm'. Those 6 Location types are just grouping of two or more other Location Types.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfirst_county <- counties %>%\n  slice(1:54)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in slice(., 1:54): object 'counties' not found\n```\n:::\n\n```{.r .cell-code}\nfirst_county\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'first_county' not found\n```\n:::\n\n```{.r .cell-code}\nfirst_county2 <- first_county %>%\n  slice(2:54)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in slice(., 2:54): object 'first_county' not found\n```\n:::\n\n```{.r .cell-code}\nmapply(sum,first_county2[,c(2:9)], na.rm= TRUE)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in mapply(sum, first_county2[, c(2:9)], na.rm = TRUE): object 'first_county2' not found\n```\n:::\n:::\n\n\nSo I checked by droping those overlapping/duplicated locations for the Barnstable County and again rechecked. Now the sum of the locations is same as that of 'All Location Types'.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndfRemain <- first_county[-c(3, 22,27,42,47,38), ]\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'first_county' not found\n```\n:::\n\n```{.r .cell-code}\ndfRemain\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'dfRemain' not found\n```\n:::\n\n```{.r .cell-code}\nall_location <- dfRemain[c(1), ]\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'dfRemain' not found\n```\n:::\n\n```{.r .cell-code}\nall_location %>%\n  select(2:9)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in select(., 2:9): object 'all_location' not found\n```\n:::\n\n```{.r .cell-code}\ndf <-  dfRemain[-c(1), ]\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'dfRemain' not found\n```\n:::\n\n```{.r .cell-code}\nmapply(sum,df[,c(2:9)], na.rm= TRUE)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in df[, c(2:9)]: object of type 'closure' is not subsettable\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_county_data<-subset(counties, Location != 'Commercial' & Location !='Educational Facility' & Location != 'Government/Public Building and other' & Location != 'Road/Parking/Camps' & Location != 'Field/Woods/Waterways/Camps' & Location != 'Construction/Industrial/Farm' & Location != 'All Location Types')\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in subset(counties, Location != \"Commercial\" & Location != \"Educational Facility\" & : object 'counties' not found\n```\n:::\n\n```{.r .cell-code}\nnew_county_data\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'new_county_data' not found\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(counties)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'counties' not found\n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n#### Joining the crime data for 2021 with the population dataset of Massachusetts\n\n\n::: {.cell}\n\n```{.r .cell-code}\nma_crime_2021 <- new_county_data %>% left_join(ma_population,by=\"County\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in left_join(., ma_population, by = \"County\"): object 'new_county_data' not found\n```\n:::\n:::\n\n\nThe number of crimes per 1000 people in the county can be a good way to start with the analysis. So I scaled down the population data to per 1000.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrime_per_population <- ma_crime_2021 %>%  \n    mutate(across(c(2:9),\n           .fns = ~./(Population/1000)))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in mutate(., across(c(2:9), .fns = ~./(Population/1000))): object 'ma_crime_2021' not found\n```\n:::\n\n```{.r .cell-code}\ncrime_per_population\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'crime_per_population' not found\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncrime_per_population <- pivot_longer(crime_per_population, `6-9pm`:`3-6pm`, names_to = \"Time_of_day\", values_to = \"Crime_rate\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in pivot_longer(crime_per_population, `6-9pm`:`3-6pm`, names_to = \"Time_of_day\", : object 'crime_per_population' not found\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- crime_per_population[ -c(3,4) ]\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'crime_per_population' not found\n```\n:::\n\n```{.r .cell-code}\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                              \n1 function (x, df1, df2, ncp, log = FALSE)    \n2 {                                           \n3     if (missing(ncp))                       \n4         .Call(C_df, x, df1, df2, log)       \n5     else .Call(C_dnf, x, df1, df2, ncp, log)\n6 }                                           \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(df)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in object[[i]]: object of type 'closure' is not subsettable\n```\n:::\n:::\n\n\nAccording to the data, the safest place in Massachusetts is an Air/Bus/Train Terminal in Middlesex at 12-3 am. Apparently, residences of Hampden between 3-6 pm turns out to be the most unsafe place or where most crimes happen.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf[which.max(df$Crime_rate),]\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in df$Crime_rate: object of type 'closure' is not subsettable\n```\n:::\n\n```{.r .cell-code}\ndf[which.min(df$Crime_rate),]\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in df$Crime_rate: object of type 'closure' is not subsettable\n```\n:::\n:::\n\n\nChecking whether all locations in Hampden have high crime rates and if Middlesex is safe in all locations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_middlesex <- df %>%\n  filter(County == \"Middlesex\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in UseMethod(\"filter\"): no applicable method for 'filter' applied to an object of class \"function\"\n```\n:::\n\n```{.r .cell-code}\nggplot(df_middlesex, aes(x=Time_of_day, y=Crime_rate)) +\n  geom_segment( aes(x=Time_of_day, xend=Time_of_day, y=0, yend=Crime_rate)) +\n  geom_point( size=5, color=\"red\", fill=alpha(\"orange\", 0.3), alpha=0.7, shape=21, stroke=2) \n```\n\n::: {.cell-output .cell-output-error}\n```\nError in ggplot(df_middlesex, aes(x = Time_of_day, y = Crime_rate)): object 'df_middlesex' not found\n```\n:::\n\n```{.r .cell-code}\ndf_hampden <- df %>%\n  filter(County == \"Hampden\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in UseMethod(\"filter\"): no applicable method for 'filter' applied to an object of class \"function\"\n```\n:::\n\n```{.r .cell-code}\nggplot(df_hampden, aes(x=Time_of_day, y=Crime_rate)) +\n  geom_segment( aes(x=Time_of_day, xend=Time_of_day, y=0, yend=Crime_rate)) +\n  geom_point( size=5, color=\"red\", fill=alpha(\"orange\", 0.3), alpha=0.7, shape=21, stroke=2)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in ggplot(df_hampden, aes(x = Time_of_day, y = Crime_rate)): object 'df_hampden' not found\n```\n:::\n:::\n\n\n### Comparing the crime rates in different counties.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% ggplot(aes(Time_of_day, Crime_rate, color=County)) + geom_point()\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `ggplot()`:\n! `data` cannot be a function.\nâ„¹ Have you misspelled the `data` argument in `ggplot()`\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df, aes(fill=County, y=Crime_rate, x=Time_of_day)) + \n    geom_bar(position=\"stack\", stat=\"identity\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `ggplot()`:\n! `data` cannot be a function.\nâ„¹ Have you misspelled the `data` argument in `ggplot()`\n```\n:::\n:::\n\n\n## Reflection\n\nThe data should be studied in depth to compare and find which time/location is safer. With the limited knowledge on R programming, I couldn't do all the analysis that I wanted to do in the time limit. I am planning to continue working on this project as my R knowledge gets stronger.\n\n## Conclusion\n\nThe crime data is an interesting dataset to be studied and with the minimal resource and knowledge I have, the analysis is incomplete.\n\n## Bibliography\n\n#### Source of data: https://masscrime.chs.state.ma.us/public/View/dispview.aspx\n\n#### Programming Language: R\n\n#### Course book : R for Data Science by Hadley Wickham & Garrett Grolemund\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}