{
  "hash": "3d11b64a2d391b641e62ea876a71b75a",
  "result": {
    "markdown": "---\ntitle: \"601 Fall Final Project\"\nauthor: \"Jerin Jacob\"\neditor: visual\ndescription: \"A study on the crime data of Massachusetts state\"\noutput: distill::distill_article\ndate: \"12/16/2022\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  final_project_601\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(readr)\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(readxl)\nlibrary(plyr)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Introduction\n\nThis is a study on crime data of Massachusetts states. The dataset is a county based number of crimes at a location at a specific time of the day. The data is been taken from the public website of police department. I decided to take the data for 2021 as it is the most recent data. The data from police department had only the number of crimes at a location at a time of the day. I also took census data to get the county-wise population data from the census 2020 and do the study on crime data as a function relative to the population of the county of occurance.\n\n### Reading the Data:\n\nAs there are 14 counties in Massachusetts, my data contains 14 separate county files to be read along with the population data of Massachusetts counties.\n\n\n### Reading crime data from 14 files and concatinating them to a single dataframe \n\n::: {.cell}\n\n```{.r .cell-code}\nfilepath <- \"_data/601_final_project_jerin_jacob/\"\ncsv_file_names <- list.files(path = filepath, pattern = \"_2021*\")\n#csv_file_names\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nread_crimes<-function(file_name){\n  x<-unlist(str_split(file_name, pattern=\"[[:punct:]]\", n=3))\n  read_csv(paste0(filepath, file_name),\n           skip = 8, \n           col_names = c(\"Location\",\"6-9pm\",\"9-12pm\",\"12-3am\",\"3-6am\",\"6-9am\",\"9-12noon\",\"12-3pm\",\"3-6pm\"), show_col_types = FALSE)%>%\n             mutate(County = x[1],\n                    Year = x[2])\n}\ncounties<-\n  purrr::map_dfr(csv_file_names, read_crimes) %>%\n  select(`Location`, `12-3am`, `3-6am`,  `6-9am`, `9-12noon`, `12-3pm`, `3-6pm`, `6-9pm`, `9-12pm`, `County`, `Year`)\n#counties\n#dim(counties)\n```\n:::\n\n\n#### Reading population Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nma_population <- read_csv('_data/601_final_project_jerin_jacob/MA_population.csv', col_names = c(\"Number\", \"County\", \"Population\"))\n\nma_population$County <- word(ma_population$County, 1)\n\nma_population <- ma_population[ -c(1) ]\n\nma_population\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 14 × 2\n   County     Population\n   <chr>           <dbl>\n 1 Middlesex     1605899\n 2 Worcester      826655\n 3 Suffolk        801162\n 4 Essex          787038\n 5 Norfolk        703740\n 6 Bristol        563301\n 7 Plymouth       518597\n 8 Hampden        466647\n 9 Barnstable     213505\n10 Hampshire      161361\n11 Berkshire      125927\n12 Franklin        70529\n13 Dukes           17430\n14 Nantucket       11212\n```\n:::\n:::\n\n\n\n## Reading Unemployment data of Massachusetts state\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunemployment <- read_csv('_data/601_final_project_jerin_jacob/LURReport.csv', skip = 6) %>%\n  drop_na(Month) %>%\n  filter(Month == \"Annual\") %>%\n  filter(Year == \"2020\") %>%\n  mutate(County = str_remove_all(Area, \" COUNTY\")) %>%\n  select(County, `Area Rate`)\nunemployment$County <- str_to_title(unemployment$County)\nunemployment\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 14 × 2\n   County     `Area Rate`\n   <chr>            <dbl>\n 1 Barnstable        10.8\n 2 Berkshire          9.8\n 3 Bristol           10.8\n 4 Dukes              9.9\n 5 Essex             10.4\n 6 Franklin           7.9\n 7 Hampden           11  \n 8 Hampshire          7.6\n 9 Middlesex          7.7\n10 Nantucket         11.1\n11 Norfolk            8.8\n12 Plymouth          10  \n13 Suffolk           10.3\n14 Worcester          9.3\n```\n:::\n:::\n\n\n\n\n## Reading Poverty rate in Massachusetts\n\n::: {.cell}\n\n```{.r .cell-code}\npoverty <- read_excel('_data/601_final_project_jerin_jacob/PovertyReport.xlsx', skip = 4) %>%\n  mutate(County = Name, poverty_rate = Percent...7) %>%\n  select(County, poverty_rate) %>%\n  filter(!County == \"Massachusetts\")\n\n  \npoverty\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 14 × 2\n   County     poverty_rate\n   <chr>             <dbl>\n 1 Barnstable          7.7\n 2 Berkshire          10  \n 3 Bristol            10.1\n 4 Dukes               7.5\n 5 Essex               9  \n 6 Franklin           10.7\n 7 Hampden            14.3\n 8 Hampshire           9.3\n 9 Middlesex           7.1\n10 Nantucket           5.3\n11 Norfolk             5.9\n12 Plymouth            7.2\n13 Suffolk            16.5\n14 Worcester           9.5\n```\n:::\n:::\n\n\n## Reading Age & Sex data for Massachusetts\n\n::: {.cell}\n\n```{.r .cell-code}\nage_sex <- read_csv('_data/601_final_project_jerin_jacob/age_sex.csv') %>%\n  mutate(County = str_remove_all(CTYNAME, \" County\")) %>%\n  filter(YEAR == 12) %>%\n    mutate(male18_24percent = round((AGE1824_MALE/POPESTIMATE)*100)) %>%\n    mutate(male25_29percent = round((AGE2529_MALE/POPESTIMATE)*100)) %>%\n  select(County, male18_24percent, male25_29percent)\n  \n\nage_sex\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 14 × 3\n   County     male18_24percent male25_29percent\n   <chr>                 <dbl>            <dbl>\n 1 Barnstable                4                2\n 2 Berkshire                 5                3\n 3 Bristol                   5                3\n 4 Dukes                     3                3\n 5 Essex                     5                3\n 6 Franklin                  4                3\n 7 Hampden                   5                4\n 8 Hampshire                10                3\n 9 Middlesex                 5                4\n10 Nantucket                 3                3\n11 Norfolk                   4                3\n12 Plymouth                  4                3\n13 Suffolk                   6                6\n14 Worcester                 5                3\n```\n:::\n:::\n\n\n## 3 main reasons for crime rates \n\n::: {.cell}\n\n```{.r .cell-code}\ncrimerate_reasons <- join_all(list(unemployment, poverty, age_sex), by = 'County', type = 'left') %>%\n  mutate(unemp_rate = `Area Rate`) %>%\n  select(!`Area Rate`)\n  \ncrimerate_reasons\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       County poverty_rate male18_24percent male25_29percent unemp_rate\n1  Barnstable          7.7                4                2       10.8\n2   Berkshire         10.0                5                3        9.8\n3     Bristol         10.1                5                3       10.8\n4       Dukes          7.5                3                3        9.9\n5       Essex          9.0                5                3       10.4\n6    Franklin         10.7                4                3        7.9\n7     Hampden         14.3                5                4       11.0\n8   Hampshire          9.3               10                3        7.6\n9   Middlesex          7.1                5                4        7.7\n10  Nantucket          5.3                3                3       11.1\n11    Norfolk          5.9                4                3        8.8\n12   Plymouth          7.2                4                3       10.0\n13    Suffolk         16.5                6                6       10.3\n14  Worcester          9.5                5                3        9.3\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nCounty_crime_total <- filter(counties, Location == \"All Location Types\")\n#head(County_crime_total)\n#head(ma_population)\n```\n:::\n\n\nTo get the crime rate for each county I joined the population data for counties to the crime data and made the number of crimes a function of per 100000 people in the county so that we can compare counties.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_crime_rate <- County_crime_total %>%\n  left_join(ma_population,by= \"County\")%>%\n  mutate(across(c(2:9),\n           .fns = ~./(Population/100000)))%>%\n  pivot_longer(cols = (ends_with(\"am\") | ends_with(\"pm\")) | ends_with(\"noon\"), names_to = \"Time\", values_to = \"Crime_Rate\")\ndf_crime_rate$Crime_Rate <- round(df_crime_rate$Crime_Rate)\ndf_crime_rate$Time<- factor(df_crime_rate$Time,                 # Relevel group factor\n                         levels = c(\"12-3am\", \"3-6am\", \"6-9am\", \"9-12noon\", \"12-3pm\", \"3-6pm\", \"6-9pm\",\"9-12pm\"))\n\ndf_crime_rate\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 112 × 6\n   Location           County     Year  Population Time     Crime_Rate\n   <chr>              <chr>      <chr>      <dbl> <fct>         <dbl>\n 1 All Location Types Barnstable 2021      213505 12-3am          430\n 2 All Location Types Barnstable 2021      213505 3-6am           190\n 3 All Location Types Barnstable 2021      213505 6-9am           607\n 4 All Location Types Barnstable 2021      213505 12-3pm         1421\n 5 All Location Types Barnstable 2021      213505 3-6pm          1264\n 6 All Location Types Barnstable 2021      213505 6-9pm           969\n 7 All Location Types Barnstable 2021      213505 9-12pm          661\n 8 All Location Types Barnstable 2021      213505 9-12noon       1314\n 9 All Location Types Berkshire  2021      125927 12-3am          246\n10 All Location Types Berkshire  2021      125927 3-6am           172\n# … with 102 more rows\n```\n:::\n:::\n\n\n## Finding which county has the highest crime rate \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_crime_rate %>%\n  select(County, Crime_Rate) %>%\n  group_by(County) %>%\n  summarise(crime_total = sum(Crime_Rate)) #%>%\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  crime_total\n1      222820\n```\n:::\n\n```{.r .cell-code}\n  # ggplot(aes(x = County, y = CrimeRate, fill = County)) + \n  #   geom_bar(stat = \"identity\", position = position_dodge(0.9)) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +\n  # geom_text(aes(label = CrimeRate), vjust = 0)\n```\n:::\n\n\n\n## Finding which time of the day has the highest crime rate \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntime_total_crime_rate <- df_crime_rate %>%\n  group_by(Time) %>%\n  summarise(CrimeRate = sum(Crime_Rate))\ncounty_total_crime_rate\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'county_total_crime_rate' not found\n```\n:::\n\n```{.r .cell-code}\nggplot(time_total_crime_rate, aes(x = Time, y = CrimeRate, fill = Time)) + \n    geom_bar(stat = \"identity\", position = position_dodge(0.9)) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +\n  geom_text(aes(label = CrimeRate), vjust = 0)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `geom_bar()`:\n! Problem while computing aesthetics.\nℹ Error occurred in the 1st layer.\nCaused by error in `FUN()`:\n! object 'Time' not found\n```\n:::\n:::\n\n\nOut of all the counties in Massachusetts, Hampden has the highest crime rate followed by Suffolk and Nantucket. The time of the day with most crime rate is '12 noon to 3 pm' followed by '3-6pm' and '9-12noon'. So I decided to check what times have most crime rates in these top counties.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_crime_rate %>%\n  filter(County == \"Hampden\" | County == \"Suffolk\"| County ==  \"Nantucket\") %>%\n  group_by(County, Time) %>%\n  summarise(CrimeRate = sum(Crime_Rate)) %>%\n  ggplot(aes(x = County, y = CrimeRate, fill = Time)) + \n    geom_bar(stat = \"identity\", position = position_dodge(0.9)) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) \n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `geom_bar()`:\n! Problem while computing aesthetics.\nℹ Error occurred in the 1st layer.\nCaused by error in `FUN()`:\n! object 'County' not found\n```\n:::\n\n```{.r .cell-code}\n# +\n#   geom_text(aes(label = CrimeRate), vjust = 0)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_crime_rate %>%\n  filter(Time == \"12-3pm\" | Time == \"3-6pm\"| Time ==  \"9-12noon\") %>%\n  group_by(Time, County) %>%\n  summarise(CrimeRate = sum(Crime_Rate)) %>%\n  ggplot(aes(x = Time, y = CrimeRate, fill = County)) + \n    geom_bar(stat = \"identity\", position = position_dodge(0.9)) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) \n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `geom_bar()`:\n! Problem while computing aesthetics.\nℹ Error occurred in the 1st layer.\nCaused by error in `FUN()`:\n! object 'Time' not found\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nunemployment\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 14 × 2\n   County     `Area Rate`\n   <chr>            <dbl>\n 1 Barnstable        10.8\n 2 Berkshire          9.8\n 3 Bristol           10.8\n 4 Dukes              9.9\n 5 Essex             10.4\n 6 Franklin           7.9\n 7 Hampden           11  \n 8 Hampshire          7.6\n 9 Middlesex          7.7\n10 Nantucket         11.1\n11 Norfolk            8.8\n12 Plymouth          10  \n13 Suffolk           10.3\n14 Worcester          9.3\n```\n:::\n\n```{.r .cell-code}\nunemployment %>%\n  #filter(Area == \"HAMPDEN COUNTY\" | Area == \"NANTUCKET COUNTY\" | Area == \"SUFFOLK COUNTY\") %>%\n  group_by(Area) %>%\n  ggplot(aes(x = Area, y = `Area Rate`, fill = Area)) +\n    geom_bar(stat = \"identity\", position = position_dodge(0.9)) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `group_by()`:\n! Must group by variables found in `.data`.\n✖ Column `Area` is not found.\n```\n:::\n:::\n\n\n##Bibliography\n\nSource of data: \n1, https://masscrime.chs.state.ma.us/public/View/dispview.aspx\n2, https://lmi.dua.eol.mass.gov/LMI/LaborForceAndUnemployment\n\nProgramming Language: R\n\nCourse book : R for Data Science by Hadley Wickham & Garrett Grolemund",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}