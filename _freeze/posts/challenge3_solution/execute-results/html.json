{
  "hash": "87df6de63fb1540d75de8780a529a876",
  "result": {
    "markdown": "---\ntitle: \"Challenge 3 solution\"\nauthor: \"Xiaoyan Hu\"\ndesription: \"Tidy Data: Pivoting\"\ndate: \"09/27/2022\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_3\n  - animal_weights\n  - eggs\n  - australian_marriage\n  - usa_households\n  - sce_labor\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n## {.tabset}\n### Challenge Overview\n\nToday's challenge is to:\n\n1.  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2.  identify what needs to be done to tidy the current data\n3.  anticipate the shape of pivoted data\n4.  pivot the data into tidy format using `pivot_longer`\n\n### Read in and describe the data\n\n#### {.tabset}\n\n##### Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n-   animal_weights.csv ‚≠ê\n-   eggs_tidy.csv ‚≠ê‚≠ê or organiceggpoultry.xls ‚≠ê‚≠ê‚≠ê\n-   australian_marriage\\*.xls ‚≠ê‚≠ê‚≠ê\n-   USA Households\\*.xlsx ‚≠ê‚≠ê‚≠ê‚≠ê\n-   sce_labor_chart_data_public.xlsx üåüüåüüåüüåüüåü\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read the data and preview\nsetwd(\"/Users/cassie199/Desktop/22fall/DACSS601/601_Fall_2022/posts/_data\")\ndata1<-read_csv(\"eggs_tidy.csv\")\n#preview\nhead(data1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 √ó 6\n  month     year large_half_dozen large_dozen extra_large_half_dozen extra_lar‚Ä¶¬π\n  <chr>    <dbl>            <dbl>       <dbl>                  <dbl>       <dbl>\n1 January   2004             126         230                    132         230 \n2 February  2004             128.        226.                   134.        230 \n3 March     2004             131         225                    137         230 \n4 April     2004             131         225                    137         234.\n5 May       2004             131         225                    137         236 \n6 June      2004             134.        231.                   137         241 \n# ‚Ä¶ with abbreviated variable name ¬π‚Äãextra_large_dozen\n```\n:::\n:::\n\n\n##### Briefly describe the data.\n\nDescribe the data, and be sure to comment on why you are planning to pivot it to make it \"tidy\"\n-- in eggs tidy file, there are a lot different animals including: \n  \n  some of them are not necessary such as cattles - dairy and non dairy since they are both cattles. Similar as swine, chicken. They can be combined together to show less columns. \n  \n  In this file there is 120 varibles and 6 observations.This data including 10 years data from each month and recorded four different sizes of egg (sold or produced). \n  \n  some of the varibles seems unnecessary such as repeated in years or month, they can be combine to one column. Therefore, this data is great for pivot. \n  My expected result is to see in each month(by colomn), how many eggs in each size were produced/or sold\n\n::: {.cell}\n\n```{.r .cell-code}\n#dimension of data\ndim(data1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 120   6\n```\n:::\n\n```{.r .cell-code}\n#column names\ncolnames(data1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"month\"                  \"year\"                   \"large_half_dozen\"      \n[4] \"large_dozen\"            \"extra_large_half_dozen\" \"extra_large_dozen\"     \n```\n:::\n:::\n\n\n### Anticipate the End Result and examples\n\n#### {.tabset}\n##### Instructions\nThe first step in pivoting the data is to try to come up with a concrete vision of what the end product *should* look like - that way you will know whether or not your pivoting was successful.\n\nOne easy way to do this is to think about the dimensions of your current data (tibble, dataframe, or matrix), and then calculate what the dimensions of the pivoted data should be.\n\nSuppose you have a dataset with $n$ rows and $k$ variables. In our example, 3 of the variables are used to identify a case, so you will be pivoting $k-3$ variables into a longer format where the $k-3$ variable names will move into the `names_to` variable and the current values in each of those columns will move into the `values_to` variable. Therefore, we would expect $n * (k-3)$ rows in the pivoted dataframe!\n\n##### Example: find current and future data dimensions\n\nLets see if this works with a simple example.\n\n\n::: {.cell tbl-cap='Example'}\n\n```{.r .cell-code}\ndf<-tibble(country = rep(c(\"Mexico\", \"USA\", \"France\"),2),\n           year = rep(c(1980,1990), 3), \n           trade = rep(c(\"NAFTA\", \"NAFTA\", \"EU\"),2),\n           outgoing = rnorm(6, mean=1000, sd=500),\n           incoming = rlogis(6, location=1000, \n                             scale = 400))\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 √ó 5\n  country  year trade outgoing incoming\n  <chr>   <dbl> <chr>    <dbl>    <dbl>\n1 Mexico   1980 NAFTA     866.    1463.\n2 USA      1990 NAFTA    1024.     944.\n3 France   1980 EU       1082.     374.\n4 Mexico   1990 NAFTA    1347.    1650.\n5 USA      1980 NAFTA    1316.    1813.\n6 France   1990 EU       1211.    1176.\n```\n:::\n\n```{.r .cell-code}\n#existing rows/cases\nnrow(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\n#existing columns/cases\nncol(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\n#expected rows/cases\nnrow(df) * (ncol(df)-3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12\n```\n:::\n\n```{.r .cell-code}\n# expected columns\n3 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\nOr simple example has $n = 6$ rows and $k - 3 = 2$ variables being pivoted, so we expect a new dataframe to have $n * 2 = 12$ rows x $3 + 2 = 5$ columns.\n\n### Challenge: Describe the final dimensions\n\nDocument your work here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#current dimension\ndim(data1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 120   6\n```\n:::\n\n```{.r .cell-code}\n# existing rows\nnrow(data1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 120\n```\n:::\n\n```{.r .cell-code}\n# existing columns\nncol(data1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\n#expected rows from first pivot\nnrow(data1) * (ncol(data1)-2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 480\n```\n:::\n\n```{.r .cell-code}\n# expected column from first pivot\n6-2 \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n```{.r .cell-code}\n#expected rows from second pivot\n(nrow(data1) * (ncol(data1)-2)) /12 \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 40\n```\n:::\n\n```{.r .cell-code}\n# expected column from first pivot\n2+12\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 14\n```\n:::\n:::\n\n\nAny additional comments?\nI dont quiet understand how did you get 3 in here since income and outcome considered as 2. \n\n### Pivot the Data\n\n#### {.tabset}\nNow we will pivot the data, and compare our pivoted data dimensions to the dimensions calculated above as a \"sanity\" check.\n\n##### Example\n\n\n::: {.cell tbl-cap='Pivoted Example'}\n\n```{.r .cell-code}\ndf<-pivot_longer(df, col = c(outgoing, incoming),\n                 names_to=\"trade_direction\",\n                 values_to = \"trade_value\")\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 √ó 5\n   country  year trade trade_direction trade_value\n   <chr>   <dbl> <chr> <chr>                 <dbl>\n 1 Mexico   1980 NAFTA outgoing               866.\n 2 Mexico   1980 NAFTA incoming              1463.\n 3 USA      1990 NAFTA outgoing              1024.\n 4 USA      1990 NAFTA incoming               944.\n 5 France   1980 EU    outgoing              1082.\n 6 France   1980 EU    incoming               374.\n 7 Mexico   1990 NAFTA outgoing              1347.\n 8 Mexico   1990 NAFTA incoming              1650.\n 9 USA      1980 NAFTA outgoing              1316.\n10 USA      1980 NAFTA incoming              1813.\n11 France   1990 EU    outgoing              1211.\n12 France   1990 EU    incoming              1176.\n```\n:::\n:::\n\n\nYes, once it is pivoted long, our resulting data are $12x5$ - exactly what we expected!\n\n### Challenge: Pivot the Chosen Data\n\nDocument your work here. What will a new \"case\" be once you have pivoted the data? How does it meet requirements for tidy data?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#pivot rows\ndata1<-pivot_longer(data1, col = c(large_half_dozen, large_dozen, extra_large_half_dozen, extra_large_dozen), names_to = \"size\", values_to = \"count\")\ndata1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 480 √ó 4\n   month     year size                   count\n   <chr>    <dbl> <chr>                  <dbl>\n 1 January   2004 large_half_dozen        126 \n 2 January   2004 large_dozen             230 \n 3 January   2004 extra_large_half_dozen  132 \n 4 January   2004 extra_large_dozen       230 \n 5 February  2004 large_half_dozen        128.\n 6 February  2004 large_dozen             226.\n 7 February  2004 extra_large_half_dozen  134.\n 8 February  2004 extra_large_dozen       230 \n 9 March     2004 large_half_dozen        131 \n10 March     2004 large_dozen             225 \n# ‚Ä¶ with 470 more rows\n```\n:::\n\n```{.r .cell-code}\ndata1<-pivot_wider(data1,  names_from = \"month\", values_from = \"count\")\ndata1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 40 √ó 14\n    year size       January Febru‚Ä¶¬π March April   May  June  July August Septe‚Ä¶¬≤\n   <dbl> <chr>        <dbl>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl>   <dbl>\n 1  2004 large_hal‚Ä¶    126     128.  131   131   131   134.  134.   134.    130.\n 2  2004 large_doz‚Ä¶    230     226.  225   225   225   231.  234.   234.    234.\n 3  2004 extra_lar‚Ä¶    132     134.  137   137   137   137   137    137     136.\n 4  2004 extra_lar‚Ä¶    230     230   230   234.  236   241   241    241     241 \n 5  2005 large_hal‚Ä¶    128.    128.  128.  128.  128.  128.  128.   128.    128.\n 6  2005 large_doz‚Ä¶    234.    234.  234.  234.  234.  234.  234.   234.    234.\n 7  2005 extra_lar‚Ä¶    136.    136.  136.  136.  136.  136.  136.   136.    136.\n 8  2005 extra_lar‚Ä¶    241     241   241   241   241   241   241    241     241 \n 9  2006 large_hal‚Ä¶    128.    128.  128.  128.  128.  128.  128.   128.    128.\n10  2006 large_doz‚Ä¶    234.    234.  234.  234.  234.  234.  234.   234.    234.\n# ‚Ä¶ with 30 more rows, 3 more variables: October <dbl>, November <dbl>,\n#   December <dbl>, and abbreviated variable names ¬π‚ÄãFebruary, ¬≤‚ÄãSeptember\n```\n:::\n:::\n\n\nAny additional comments??\n \n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}