{
  "hash": "988d768e85b118db3927e4c75ecb4552",
  "result": {
    "markdown": "---\ntitle: \"Challenge 7 Solutions\"\nauthor: \"Caitlin Rowley\"\ndescription: \"Visualizing Multiple Dimensions\"\ndate: \"11/04/2022\"\nformat:\n  html:\n    toc: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_7\n  - hotel_bookings\n  - australian_marriage\n  - air_bnb\n  - eggs\n  - abc_poll\n  - faostat\n  - usa_households\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Read in data\n\nI am going to work with my data set for my final project, which is a data set from AirBnB.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read in data:\n\nsetwd(\"C:/Users/caitr/OneDrive/Documents/DACSS/601_Fall_2022/posts\")\nBoston <- read_csv(\"Boston AirBnB Data.csv\")\n```\n:::\n\n\n## Tidy Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# look for duplicates\n# look for missing values\n# look for outliers - review how to clean\n# remember na.rm=TRUE for calculations\n\n# clean the data:\n\n# At first glance, it seems as though there are no values in the column titled \"neighbourhood_group.\" So, I will find all unique values within that column to determine whether it can be removed from my tidy data set.\n\nunique(Boston[c(\"neighbourhood_group\")])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  neighbourhood_group\n  <lgl>              \n1 NA                 \n```\n:::\n\n```{.r .cell-code}\n# I now know that there is no data within this column. I will remove it from my data set.\n\nBoston_tidy <- subset(Boston, select = -c(neighbourhood_group))\n\n# I can see from viewing this data frame that there are no other columns that are absent any values, so I will move on to other tidying tasks.\n\n# rename columns:\n\nnames(Boston_tidy) <- c('room_id', 'room_name', 'host_id', 'host_name', 'neighborhood', 'room_latitude', 'room_longitude', 'room_type', 'room_price', 'min_nights', 'number_reviews', 'last_review', 'reviews_per_month', 'host_listings', 'availability_next_365', 'number_reviews_LTM', 'room_license')\n\n# find duplicates:\n\nduplicates <- duplicated(Boston_tidy)\n\n# reached \"max.print\", so I will increase the limit and identify if any values within the vector = TRUE:\n\noptions(max.print=999999)\nduplicates[\"TRUE\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n\n```{.r .cell-code}\n# \"TRUE\" = NA, so I now know that there are no duplicates in my data set.\n```\n:::\n\n\n\"Boston_tidy\" represents AirBnB rental listing data for the city of Boston over the last twelve months. The data frame has 17 variables and 5,185 rows of data. Each row now represents one unique observation---or in this case, a unique rental listing---that includes data related to the following variables: (1) room/listing ID number, (2) name of the room/listing, (3) listing host ID number, (4) listing host name, (5) room/listing neighborhood, (6) room/listing latitude, (7) room/listing longitude, (8) type of room/listing, (9) room/listing price, (10) minimum number of nights for rent, (11) number of room/listing reviews, (12) most recent room/listing review, (13) number of room/listing reviews per month, (14) number host-specific listings, (15) room/listing availability over the next year, (16) number of reviews for room/listing over the past 12 months, and (17) room/listing licensure status.\n\n## Mutate\n\nNext, I will mutate variables (**please note that I've added 'print(head())' to the data frame to shorten the output, but it's not rendering**).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# mutate lat and lon to create \"room_coordinates\"\n# keep lat and lon columns for now\n\nBoston_mutate <- Boston_tidy %>%\nmutate(\"room_coordinates\" = paste(room_latitude, room_longitude))\ncolnames(Boston_mutate)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"room_id\"               \"room_name\"             \"host_id\"              \n [4] \"host_name\"             \"neighborhood\"          \"room_latitude\"        \n [7] \"room_longitude\"        \"room_type\"             \"room_price\"           \n[10] \"min_nights\"            \"number_reviews\"        \"last_review\"          \n[13] \"reviews_per_month\"     \"host_listings\"         \"availability_next_365\"\n[16] \"number_reviews_LTM\"    \"room_license\"          \"room_coordinates\"     \n```\n:::\n:::\n\n\nFind median room prices:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# find median room prices by neighborhood and room type:\n\nBoston_median <- Boston_mutate%>%\n  filter(room_price>0) %>%\n  group_by(room_type, neighborhood)%>%\n    summarize(median_price = median(room_price))\n```\n:::\n\n\nI will next move on to summary statistics. I will use the complete data set for this portion of code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# summary statistics for entire data set: \n\nsummary.data.frame(Boston_mutate)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    room_id           room_name            host_id           host_name        \n Min.   :3.168e+03   Length:5185        Min.   :     3697   Length:5185       \n 1st Qu.:2.083e+07   Class :character   1st Qu.: 18517776   Class :character  \n Median :4.322e+07   Mode  :character   Median : 87330733   Mode  :character  \n Mean   :1.440e+17                      Mean   :125494858                     \n 3rd Qu.:5.358e+07                      3rd Qu.:212359760                     \n Max.   :7.162e+17                      Max.   :479130189                     \n                                                                              \n neighborhood       room_latitude   room_longitude    room_type        \n Length:5185        Min.   :42.23   Min.   :-71.20   Length:5185       \n Class :character   1st Qu.:42.33   1st Qu.:-71.11   Class :character  \n Mode  :character   Median :42.35   Median :-71.08   Mode  :character  \n                    Mean   :42.35   Mean   :-71.09                     \n                    3rd Qu.:42.37   3rd Qu.:-71.06                     \n                    Max.   :42.41   Max.   :-70.91                     \n                                                                       \n   room_price        min_nights     number_reviews    last_review       \n Min.   :    0.0   Min.   :  1.00   Min.   :   0.00   Length:5185       \n 1st Qu.:  100.0   1st Qu.:  2.00   1st Qu.:   1.00   Class :character  \n Median :  179.0   Median : 10.00   Median :   9.00   Mode  :character  \n Mean   :  230.6   Mean   : 27.41   Mean   :  47.31                     \n 3rd Qu.:  275.0   3rd Qu.: 32.00   3rd Qu.:  54.00                     \n Max.   :10000.0   Max.   :730.00   Max.   :1100.00                     \n                                                                        \n reviews_per_month host_listings    availability_next_365 number_reviews_LTM\n Min.   : 0.010    Min.   :  1.00   Min.   :  0.0         Min.   :  0.00    \n 1st Qu.: 0.310    1st Qu.:  2.00   1st Qu.: 77.0         1st Qu.:  0.00    \n Median : 1.060    Median :  6.00   Median :187.0         Median :  2.00    \n Mean   : 1.806    Mean   : 62.29   Mean   :189.7         Mean   : 13.19    \n 3rd Qu.: 2.660    3rd Qu.: 45.00   3rd Qu.:315.0         3rd Qu.: 17.00    \n Max.   :18.110    Max.   :477.00   Max.   :365.0         Max.   :256.00    \n NA's   :1225                                                               \n room_license       room_coordinates  \n Length:5185        Length:5185       \n Class :character   Class :character  \n Mode  :character   Mode  :character  \n                                      \n                                      \n                                      \n                                      \n```\n:::\n\n```{.r .cell-code}\n# change variables from character to numeric\n\nBoston_mutate %>% \n  group_by(room_price, min_nights, number_reviews, host_listings, availability_next_365) %>% \n  summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    room_id           room_name            host_id           host_name        \n Min.   :3.168e+03   Length:5185        Min.   :     3697   Length:5185       \n 1st Qu.:2.083e+07   Class :character   1st Qu.: 18517776   Class :character  \n Median :4.322e+07   Mode  :character   Median : 87330733   Mode  :character  \n Mean   :1.440e+17                      Mean   :125494858                     \n 3rd Qu.:5.358e+07                      3rd Qu.:212359760                     \n Max.   :7.162e+17                      Max.   :479130189                     \n                                                                              \n neighborhood       room_latitude   room_longitude    room_type        \n Length:5185        Min.   :42.23   Min.   :-71.20   Length:5185       \n Class :character   1st Qu.:42.33   1st Qu.:-71.11   Class :character  \n Mode  :character   Median :42.35   Median :-71.08   Mode  :character  \n                    Mean   :42.35   Mean   :-71.09                     \n                    3rd Qu.:42.37   3rd Qu.:-71.06                     \n                    Max.   :42.41   Max.   :-70.91                     \n                                                                       \n   room_price        min_nights     number_reviews    last_review       \n Min.   :    0.0   Min.   :  1.00   Min.   :   0.00   Length:5185       \n 1st Qu.:  100.0   1st Qu.:  2.00   1st Qu.:   1.00   Class :character  \n Median :  179.0   Median : 10.00   Median :   9.00   Mode  :character  \n Mean   :  230.6   Mean   : 27.41   Mean   :  47.31                     \n 3rd Qu.:  275.0   3rd Qu.: 32.00   3rd Qu.:  54.00                     \n Max.   :10000.0   Max.   :730.00   Max.   :1100.00                     \n                                                                        \n reviews_per_month host_listings    availability_next_365 number_reviews_LTM\n Min.   : 0.010    Min.   :  1.00   Min.   :  0.0         Min.   :  0.00    \n 1st Qu.: 0.310    1st Qu.:  2.00   1st Qu.: 77.0         1st Qu.:  0.00    \n Median : 1.060    Median :  6.00   Median :187.0         Median :  2.00    \n Mean   : 1.806    Mean   : 62.29   Mean   :189.7         Mean   : 13.19    \n 3rd Qu.: 2.660    3rd Qu.: 45.00   3rd Qu.:315.0         3rd Qu.: 17.00    \n Max.   :18.110    Max.   :477.00   Max.   :365.0         Max.   :256.00    \n NA's   :1225                                                               \n room_license       room_coordinates  \n Length:5185        Length:5185       \n Class :character   Class :character  \n Mode  :character   Mode  :character  \n                                      \n                                      \n                                      \n                                      \n```\n:::\n\n```{.r .cell-code}\n# HAVING TROUBLE APPLYING 'SUMMARY()' TO MULTIPLE COLUMNS\n# output shows summary, but for all variables, not just those included in list\n```\n:::\n\n\nI am having trouble applying the 'summary()' function to only select variables, so I will revisit this.\n\n## Visualization with Multiple Dimensions\n\nI will next generate visualizations with multiple dimensions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(RColorBrewer)\nlibrary(ggtext)\nlibrary(ggplot2)\n\n# generate stacked bar chart:\n\nggplot(Boston_median, aes(x=neighborhood, y=median_price, fill=neighborhood)) + geom_bar(stat=\"identity\") +\n    scale_fill_hue() +\ntheme_classic() +\ntheme(axis.text.x = element_markdown(angle=90, hjust=1))\n```\n\n::: {.cell-output-display}\n![](Challenge7---Caitlin-Rowley_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nThis is interesting, but not a great way to visualize this data, as we don't get to see the distribution of data points. I will next generate a violin plot that omits outliers.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# remove outliers:\n\nis_outlier <- function(x) {\n  return(x < quantile(x, 0.25) - 1.5 * IQR(x) | x > quantile(x, 0.75) + 1.5 * IQR(x))\n}\n\nBoston_trim <- Boston_mutate %>%\n  filter(!is_outlier(room_price))\n\n# create dataframe:\n\nBoston_trim%>%\n  filter(room_price>0, room_price<600) %>%\n  group_by(room_type, neighborhood) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4,918 × 18\n# Groups:   room_type, neighborhood [65]\n   room_id room_name     host_id host_…¹ neigh…² room_…³ room_…⁴ room_…⁵ room_…⁶\n     <dbl> <chr>           <dbl> <chr>   <chr>     <dbl>   <dbl> <chr>     <dbl>\n 1    3168 TudorStudio      3697 Mark    Bright…    42.4   -71.2 Privat…      99\n 2    3781 HARBORSIDE-W…    4804 Frank   East B…    42.4   -71.0 Entire…     132\n 3    5506 ** Fort Hill…    8229 Terry   Roxbury    42.3   -71.1 Entire…     149\n 4    6695 Fort Hill In…    8229 Terry   Roxbury    42.3   -71.1 Entire…     179\n 5    7903 Colorful, mo…   14169 Stacy   Charle…    42.4   -71.1 Privat…     116\n 6    8521 SunsplashedS…  306681 Janet   Allston    42.4   -71.1 Entire…     300\n 7    8789 Curved Glass…   26988 Anne    Beacon…    42.4   -71.1 Entire…     110\n 8   10813 Back Bay Apt…   38997 Michel… Back B…    42.4   -71.1 Entire…     135\n 9   10986 North End (W…   38997 Michel… North …    42.4   -71.1 Entire…     135\n10   18711 230B1 · The …   71783 Lance   Dorche…    42.3   -71.1 Entire…     133\n# … with 4,908 more rows, 9 more variables: min_nights <dbl>,\n#   number_reviews <dbl>, last_review <chr>, reviews_per_month <dbl>,\n#   host_listings <dbl>, availability_next_365 <dbl>, number_reviews_LTM <dbl>,\n#   room_license <chr>, room_coordinates <chr>, and abbreviated variable names\n#   ¹​host_name, ²​neighborhood, ³​room_latitude, ⁴​room_longitude, ⁵​room_type,\n#   ⁶​room_price\n```\n:::\n\n```{.r .cell-code}\n# generate violin plot:\n\nBoston_trim%>%\n  ggplot(aes(x=room_type, y=room_price, fill=neighborhood)) + \n  geom_violin(width = 1, size = .5, \n              scale = \"area\",\n              trim = TRUE)+\n  coord_flip()+\n  labs(x=\"Room Type\", y=\"Room Price\", title = \"Price by Room Type and Neighborhood\")\n```\n\n::: {.cell-output-display}\n![](Challenge7---Caitlin-Rowley_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nGiven the number of neighborhoods, this is extremely difficult to read. I will use facet wrapping to adjust the visualization.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# violin plot with facet wrapping:\n\nBoston_trim %>% \n  ggplot(aes(x=neighborhood, y=room_price, fill=room_type)) + \n  geom_violin(width = 1, size = .5, \n              scale = \"area\",\n              trim = FALSE)+\n  facet_wrap(vars(neighborhood), scales = \"free\")+\n  theme_bw()+\n  labs(x=\"Neighborhood\", y = \"Price\", fill= \"Room Type\", title = \"Boston Airbnb Prices by Neighborhood and Room Type\", subtitle= \"2021\")\n```\n\n::: {.cell-output-display}\n![](Challenge7---Caitlin-Rowley_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nI want to figure out how to adjust the scale of the violin plots themselves so that I can read the data. I have tried adjusting the scale in the facet wrapping code chunk, but that hasn't worked so far. I will continue working on this.\n\nI will next generate a tree map. It won't be helpful in terms of visualizing prices, but I wanted to give it a shot as practice.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"wesanderson\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in contrib.url(repos, \"source\"): trying to use CRAN without setting a mirror\n```\n:::\n\n```{.r .cell-code}\nlibrary(wesanderson)\nlibrary(RColorBrewer)\ninstall.packages(\"treemap\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in contrib.url(repos, \"source\"): trying to use CRAN without setting a mirror\n```\n:::\n\n```{.r .cell-code}\nlibrary(treemap)\nlibrary(RColorBrewer)\n\n# load color palette:\n\nbudapest <- wes_palette(\"GrandBudapest2\", 4, type = \"discrete\")\n\n# generate tree map:\n\nBoston_median%>%\ntreemap(room_type,\n        index= c(\"neighborhood\", \"room_type\"),\n        vSize = \"median_price\",\n        type = \"index\",\n        title = \"Listing Price by Neighborhood and Room Type\",\n        overlap.labels = 0,\n        palette = (budapest))\n```\n\n::: {.cell-output-display}\n![](Challenge7---Caitlin-Rowley_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Challenge7---Caitlin-Rowley_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}