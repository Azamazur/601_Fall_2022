{
  "hash": "95cbfc28b5162f37d8596ae26d611c14",
  "result": {
    "markdown": "---\ntitle: \"Caitlin Rowley - HW3\"\nauthor: \"Caitlin Rowley\"\ndate: 11/25/2022\neditor: visual\n---\n\n::: {.cell}\n\n```{.r .cell-code}\n#| label: setup\n#| warning: false\n#| message: false\n\n# install packages and load libraries:\n\ninstall.packages(\"readr\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nInstalling package into 'C:/Users/caitr/AppData/Local/R/win-library/4.2'\n(as 'lib' is unspecified)\n```\n:::\n\n::: {.cell-output .cell-output-error}\n```\nError in contrib.url(repos, \"source\"): trying to use CRAN without setting a mirror\n```\n:::\n\n```{.r .cell-code}\ninstall.packages(\"readxl\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nInstalling package into 'C:/Users/caitr/AppData/Local/R/win-library/4.2'\n(as 'lib' is unspecified)\n```\n:::\n\n::: {.cell-output .cell-output-error}\n```\nError in contrib.url(repos, \"source\"): trying to use CRAN without setting a mirror\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tidyverse' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages\n───────────────────────────────────────\ntidyverse 1.3.2 ──\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ ggplot2 3.3.6      ✔ purrr   0.3.4 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.4.1 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'readr' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nlibrary(readr)\nlibrary(readxl)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'readxl' was built under R version 4.2.2\n```\n:::\n\n```{.r .cell-code}\nlibrary(dplyr)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Read in Data\n\nI selected a data set from the Inside AirBnB website, capturing data related to summary information and metrics for listings in Boston, MA.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read in dataset:\n\nsetwd(\"C:/Users/caitr/OneDrive/Documents/DACSS/601_Fall_2022/posts\")\nBoston <- read_csv(\"Boston AirBnB Data.csv\")\n```\n:::\n\n\n## Tidy Data\n\nI will now tidy the data to look for missing values and duplicates. I will also rename columns as needed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# look for duplicates\n# look for missing values\n# remember na.rm=TRUE for calculations\n\n# At first glance, it seems as though there are no values in the column titled \"neighbourhood_group.\" So, I will find all unique values within that column to determine whether it can be removed from my tidy data set.\n\nunique(Boston[c(\"neighbourhood_group\")])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  neighbourhood_group\n  <lgl>              \n1 NA                 \n```\n:::\n\n```{.r .cell-code}\n# I now know that there is no data within this column. I will remove it from my data set.\n\nBoston_tidy <- subset(Boston, select = -c(neighbourhood_group))\n\n# I can see from viewing this data frame that there are no other columns that are absent any values, so I will move on to other tidying tasks.\n\n# rename columns:\n\nnames(Boston_tidy) <- c('room_id', 'room_name', 'host_id', 'host_name', 'neighborhood', 'room_latitude', 'room_longitude', 'room_type', 'room_price', 'min_nights', 'number_reviews', 'last_review', 'reviews_per_month', 'host_listings', 'availability_next_365', 'number_reviews_LTM', 'room_license')\n\n# find duplicates:\n\nduplicates <- duplicated(Boston_tidy)\n\n# reached \"max.print\", so I will increase the limit and identify if any values within the vector = TRUE:\n\noptions(max.print=999999)\nduplicates[\"TRUE\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n:::\n\n\n## Summary of Data\n\n\"Boston_tidy\" represents AirBnB rental listing data for the city of Boston over the last twelve months. The data frame has 17 variables and 5,185 rows of data. Each row now represents one unique observation---or in this case, a unique rental listing---that includes data related to the following variables: (1) room/listing ID number, (2) name of the room/listing, (3) listing host ID number, (4) listing host name, (5) room/listing neighborhood, (6) room/listing latitude, (7) room/listing longitude, (8) type of room/listing, (9) room/listing price, (10) minimum number of nights for rent, (11) number of room/listing reviews, (12) most recent room/listing review, (13) number of room/listing reviews per month, (14) number host-specific listings, (15) room/listing availability over the next year, (16) number of reviews for room/listing over the past 12 months, and (17) room/listing licensure status.\n\nSome potential research questions include:\n\n-   Which neighborhoods have the most expensive price per bed?\n\n-   Which neighborhoods have the highest number of listings?\n\n-   Which property types are listed most frequently?\n\n-   What's the average listing price by property types?\n\n-   What's the average price per bed price by property type?\n\n-   What does the occupancy rate look like by neighborhood?\n\n-   What factors affect the price the most?\n\n-   Can the price be accurately predicted, given other information about the listing?\n\n-   Is there a correlation between number of reviews and occupancy?\n\n## Mutate\n\nNext, I will mutate variables. I will start off by adding the variable \"room_coordinates\" to my overall data set. I think this may come in handy if I choose to use a map for visualization, as I may need to match coordinates between my data set and those included in mapping packages such as 'map_data().'\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# mutate lat and lon to create \"room_coordinates\"\n# keep lat and lon columns for now\n\nBoston_mutate <- Boston_tidy %>%\nmutate(\"room_coordinates\" = paste(room_latitude, room_longitude))\ncolnames(Boston_mutate)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"room_id\"               \"room_name\"             \"host_id\"              \n [4] \"host_name\"             \"neighborhood\"          \"room_latitude\"        \n [7] \"room_longitude\"        \"room_type\"             \"room_price\"           \n[10] \"min_nights\"            \"number_reviews\"        \"last_review\"          \n[13] \"reviews_per_month\"     \"host_listings\"         \"availability_next_365\"\n[16] \"number_reviews_LTM\"    \"room_license\"          \"room_coordinates\"     \n```\n:::\n:::\n\n\n## Summary Statistics\n\nI will next create a subset of data that includes the new variable \"median_price,\" which will only include room prices greater than \\$0. This data set will also grouped by the original variables \"room_type\" and \"neighborhood.\" This will be useful in terms of both summary statistics and visualization.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# find median room prices by neighborhood and room type:\n\nBoston_median <- Boston_mutate%>%\n  filter(room_price>0) %>%\n  group_by(room_type, neighborhood)%>%\n    summarize(median_price = median(room_price))\nprint(head(Boston_median))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n# Groups:   room_type [1]\n  room_type       neighborhood median_price\n  <chr>           <chr>               <dbl>\n1 Entire home/apt Allston              216 \n2 Entire home/apt Back Bay             278 \n3 Entire home/apt Bay Village          200 \n4 Entire home/apt Beacon Hill          207 \n5 Entire home/apt Brighton             191 \n6 Entire home/apt Charlestown          240.\n```\n:::\n\n```{.r .cell-code}\nsummary(Boston_median$median_price)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  10.00   85.25  150.50  176.11  228.50  750.00 \n```\n:::\n:::\n\n\nWe can see from this data set that the highest median room price is \\$750/night for a shared room in the Fenway neighborhood. The lowest median room price is \\$10/night for a shared room in Charlestown.\n\nI will next generate statistics related to room price, minimum number of nights per stay, number of reviews per room, and number of listings by host.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# summary statistics for entire data set: \n\nsummary.data.frame(Boston_mutate)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    room_id           room_name            host_id           host_name        \n Min.   :3.168e+03   Length:5185        Min.   :     3697   Length:5185       \n 1st Qu.:2.083e+07   Class :character   1st Qu.: 18517776   Class :character  \n Median :4.322e+07   Mode  :character   Median : 87330733   Mode  :character  \n Mean   :1.440e+17                      Mean   :125494858                     \n 3rd Qu.:5.358e+07                      3rd Qu.:212359760                     \n Max.   :7.162e+17                      Max.   :479130189                     \n                                                                              \n neighborhood       room_latitude   room_longitude    room_type        \n Length:5185        Min.   :42.23   Min.   :-71.20   Length:5185       \n Class :character   1st Qu.:42.33   1st Qu.:-71.11   Class :character  \n Mode  :character   Median :42.35   Median :-71.08   Mode  :character  \n                    Mean   :42.35   Mean   :-71.09                     \n                    3rd Qu.:42.37   3rd Qu.:-71.06                     \n                    Max.   :42.41   Max.   :-70.91                     \n                                                                       \n   room_price        min_nights     number_reviews    last_review       \n Min.   :    0.0   Min.   :  1.00   Min.   :   0.00   Length:5185       \n 1st Qu.:  100.0   1st Qu.:  2.00   1st Qu.:   1.00   Class :character  \n Median :  179.0   Median : 10.00   Median :   9.00   Mode  :character  \n Mean   :  230.6   Mean   : 27.41   Mean   :  47.31                     \n 3rd Qu.:  275.0   3rd Qu.: 32.00   3rd Qu.:  54.00                     \n Max.   :10000.0   Max.   :730.00   Max.   :1100.00                     \n                                                                        \n reviews_per_month host_listings    availability_next_365 number_reviews_LTM\n Min.   : 0.010    Min.   :  1.00   Min.   :  0.0         Min.   :  0.00    \n 1st Qu.: 0.310    1st Qu.:  2.00   1st Qu.: 77.0         1st Qu.:  0.00    \n Median : 1.060    Median :  6.00   Median :187.0         Median :  2.00    \n Mean   : 1.806    Mean   : 62.29   Mean   :189.7         Mean   : 13.19    \n 3rd Qu.: 2.660    3rd Qu.: 45.00   3rd Qu.:315.0         3rd Qu.: 17.00    \n Max.   :18.110    Max.   :477.00   Max.   :365.0         Max.   :256.00    \n NA's   :1225                                                               \n room_license       room_coordinates  \n Length:5185        Length:5185       \n Class :character   Class :character  \n Mode  :character   Mode  :character  \n                                      \n                                      \n                                      \n                                      \n```\n:::\n\n```{.r .cell-code}\n# summary statistics for particular group of variables:\n\nBoston_mutate %>% \n  select(room_price, min_nights, number_reviews, host_listings, availability_next_365) %>% \n  summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   room_price        min_nights     number_reviews    host_listings   \n Min.   :    0.0   Min.   :  1.00   Min.   :   0.00   Min.   :  1.00  \n 1st Qu.:  100.0   1st Qu.:  2.00   1st Qu.:   1.00   1st Qu.:  2.00  \n Median :  179.0   Median : 10.00   Median :   9.00   Median :  6.00  \n Mean   :  230.6   Mean   : 27.41   Mean   :  47.31   Mean   : 62.29  \n 3rd Qu.:  275.0   3rd Qu.: 32.00   3rd Qu.:  54.00   3rd Qu.: 45.00  \n Max.   :10000.0   Max.   :730.00   Max.   :1100.00   Max.   :477.00  \n availability_next_365\n Min.   :  0.0        \n 1st Qu.: 77.0        \n Median :187.0        \n Mean   :189.7        \n 3rd Qu.:315.0        \n Max.   :365.0        \n```\n:::\n:::\n\n\n**This summary indicates that \\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# summary statistics for categorical variables:\n\nBoston_id <- Boston_mutate%>%\n  filter(host_id>1)%>%\n  group_by(neighborhood)\n\nprint(Boston_id)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5,185 × 18\n# Groups:   neighborhood [26]\n   room_id room_name     host_id host_…¹ neigh…² room_…³ room_…⁴ room_…⁵ room_…⁶\n     <dbl> <chr>           <dbl> <chr>   <chr>     <dbl>   <dbl> <chr>     <dbl>\n 1    3168 TudorStudio      3697 Mark    Bright…    42.4   -71.2 Privat…      99\n 2    3781 HARBORSIDE-W…    4804 Frank   East B…    42.4   -71.0 Entire…     132\n 3    5506 ** Fort Hill…    8229 Terry   Roxbury    42.3   -71.1 Entire…     149\n 4    6695 Fort Hill In…    8229 Terry   Roxbury    42.3   -71.1 Entire…     179\n 5    7903 Colorful, mo…   14169 Stacy   Charle…    42.4   -71.1 Privat…     116\n 6    8521 SunsplashedS…  306681 Janet   Allston    42.4   -71.1 Entire…     300\n 7    8789 Curved Glass…   26988 Anne    Beacon…    42.4   -71.1 Entire…     110\n 8   10813 Back Bay Apt…   38997 Michel… Back B…    42.4   -71.1 Entire…     135\n 9   10986 North End (W…   38997 Michel… North …    42.4   -71.1 Entire…     135\n10   18711 230B1 · The …   71783 Lance   Dorche…    42.3   -71.1 Entire…     133\n# … with 5,175 more rows, 9 more variables: min_nights <dbl>,\n#   number_reviews <dbl>, last_review <chr>, reviews_per_month <dbl>,\n#   host_listings <dbl>, availability_next_365 <dbl>, number_reviews_LTM <dbl>,\n#   room_license <chr>, room_coordinates <chr>, and abbreviated variable names\n#   ¹​host_name, ²​neighborhood, ³​room_latitude, ⁴​room_longitude, ⁵​room_type,\n#   ⁶​room_price\n```\n:::\n:::\n\n\n**SUMMARY\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_**\n\n## Visualization with Multiple Dimensions\n\nI will next focus on data visualization. I will first generate a bar chart portraying median room price by neighborhood.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(RColorBrewer)\nlibrary(ggtext)\nlibrary(ggplot2)\n\n# generate bar chart:\n\nggplot(Boston_median, aes(x=neighborhood, y=median_price, fill=neighborhood)) + geom_bar(stat=\"identity\") +\n  scale_fill_hue() +\n  theme_classic() +\n  labs(x=\"Neighborhood\",y=\"Median Price per Night\", title = \"Boston Airbnb Rental Prices by Neighborhood\")+\n  theme(axis.text.x = element_markdown(angle=90, hjust=1))\n```\n\n::: {.cell-output-display}\n![](Caitlin-Rowley---HW3_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n**SUMMARY\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_**\n\nI will next generate a geom_point chart to visualize room price by neighborhood and room type. I will also apply a boxplot overlay to capture both the interquartile range and outliers. I will first need to exclude strong outliers\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# remove outliers:\n\nis_outlier <- function(x) {\n  return(x < quantile(x, 0.25) - 1.5 * IQR(x) | x > quantile(x, 0.75) + 1.5 * IQR(x))\n}\n\nBoston_outlier <- Boston_mutate %>%\n  filter(!is_outlier(room_price))\n\n# create dataframe:\n\nBoston_outlier%>%\n  filter(room_price>0, room_price<800) %>%\n  group_by(room_type, neighborhood)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4,918 × 18\n# Groups:   room_type, neighborhood [65]\n   room_id room_name     host_id host_…¹ neigh…² room_…³ room_…⁴ room_…⁵ room_…⁶\n     <dbl> <chr>           <dbl> <chr>   <chr>     <dbl>   <dbl> <chr>     <dbl>\n 1    3168 TudorStudio      3697 Mark    Bright…    42.4   -71.2 Privat…      99\n 2    3781 HARBORSIDE-W…    4804 Frank   East B…    42.4   -71.0 Entire…     132\n 3    5506 ** Fort Hill…    8229 Terry   Roxbury    42.3   -71.1 Entire…     149\n 4    6695 Fort Hill In…    8229 Terry   Roxbury    42.3   -71.1 Entire…     179\n 5    7903 Colorful, mo…   14169 Stacy   Charle…    42.4   -71.1 Privat…     116\n 6    8521 SunsplashedS…  306681 Janet   Allston    42.4   -71.1 Entire…     300\n 7    8789 Curved Glass…   26988 Anne    Beacon…    42.4   -71.1 Entire…     110\n 8   10813 Back Bay Apt…   38997 Michel… Back B…    42.4   -71.1 Entire…     135\n 9   10986 North End (W…   38997 Michel… North …    42.4   -71.1 Entire…     135\n10   18711 230B1 · The …   71783 Lance   Dorche…    42.3   -71.1 Entire…     133\n# … with 4,908 more rows, 9 more variables: min_nights <dbl>,\n#   number_reviews <dbl>, last_review <chr>, reviews_per_month <dbl>,\n#   host_listings <dbl>, availability_next_365 <dbl>, number_reviews_LTM <dbl>,\n#   room_license <chr>, room_coordinates <chr>, and abbreviated variable names\n#   ¹​host_name, ²​neighborhood, ³​room_latitude, ⁴​room_longitude, ⁵​room_type,\n#   ⁶​room_price\n```\n:::\n\n```{.r .cell-code}\n# generate geom_point chart\n# facet wrap\n# boxplot overlay\n\nBoston_outlier%>%\n group_by(room_type, neighborhood)%>%\n  ggplot(aes(x=neighborhood, y=room_price)) +\n  geom_point(alpha=.08, size=3, color = \"light pink\")+\n  facet_wrap(\"room_type\")+\n  labs(x=\"Neighborhood\",y=\"Price per Night\", title = \"Boston Airbnb Rental Prices by Neighborhood and Room Type\")+\n  theme_light()+\n  geom_boxplot()+\n  theme(axis.text.x = element_markdown(angle = 90, hjust=1))\n```\n\n::: {.cell-output-display}\n![](Caitlin-Rowley---HW3_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nThis is very difficult to read due to the number of neighborhoods, so I am going to apply the three variables (room price, room type, and neighborhood) to another visual. In the interim, I will display a simpler version of this geom_point chart without the facet wrap so that the visual only captures neighborhood and room price per night.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBoston_outlier%>%\n group_by(room_type, neighborhood)%>%\n  ggplot(aes(x=neighborhood, y=room_price)) +\n  geom_point(alpha=.08, size=5, color = \"light pink\")+\n  labs(x=\"Neighborhood\",y=\"Price per Night\", title = \"Boston Airbnb Rental Prices by Neighborhood\")+\n  theme_light()+\n  geom_boxplot()+\n  theme(axis.text.x = element_markdown(angle = 90, hjust=1))\n```\n\n::: {.cell-output-display}\n![](Caitlin-Rowley---HW3_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n**SUMMARY\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_**\n\nI will next visualize the data using a choropleth map. I will generate a map of the Boston area and apply data related to neighborhood, room price, and room type.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(maps)\nlibrary(viridisLite)\nlibrary(ggplot2)\nlibrary(tidyverse)\n\n# generate map\n\nstates_map <- map_data(\"state\")\n\nma_map <- filter(states_map, region==\"massachusetts\") %>%\nggplot(., aes(x=long, y=lat, group=group)) +\n  geom_polygon(fill=\"white\", color=\"black\")\nma_map\n```\n\n::: {.cell-output-display}\n![](Caitlin-Rowley---HW3_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# merge 'ma_map' and 'Boston_tidy' by coordinates\n\n# mutate and rename columns\n\nBoston_mutate %>%\n  rename(\"coordinates\" = \"room_coordinates\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5,185 × 18\n   room_id room_name     host_id host_…¹ neigh…² room_…³ room_…⁴ room_…⁵ room_…⁶\n     <dbl> <chr>           <dbl> <chr>   <chr>     <dbl>   <dbl> <chr>     <dbl>\n 1    3168 TudorStudio      3697 Mark    Bright…    42.4   -71.2 Privat…      99\n 2    3781 HARBORSIDE-W…    4804 Frank   East B…    42.4   -71.0 Entire…     132\n 3    5506 ** Fort Hill…    8229 Terry   Roxbury    42.3   -71.1 Entire…     149\n 4    6695 Fort Hill In…    8229 Terry   Roxbury    42.3   -71.1 Entire…     179\n 5    7903 Colorful, mo…   14169 Stacy   Charle…    42.4   -71.1 Privat…     116\n 6    8521 SunsplashedS…  306681 Janet   Allston    42.4   -71.1 Entire…     300\n 7    8789 Curved Glass…   26988 Anne    Beacon…    42.4   -71.1 Entire…     110\n 8   10813 Back Bay Apt…   38997 Michel… Back B…    42.4   -71.1 Entire…     135\n 9   10986 North End (W…   38997 Michel… North …    42.4   -71.1 Entire…     135\n10   18711 230B1 · The …   71783 Lance   Dorche…    42.3   -71.1 Entire…     133\n# … with 5,175 more rows, 9 more variables: min_nights <dbl>,\n#   number_reviews <dbl>, last_review <chr>, reviews_per_month <dbl>,\n#   host_listings <dbl>, availability_next_365 <dbl>, number_reviews_LTM <dbl>,\n#   room_license <chr>, coordinates <chr>, and abbreviated variable names\n#   ¹​host_name, ²​neighborhood, ³​room_latitude, ⁴​room_longitude, ⁵​room_type,\n#   ⁶​room_price\n```\n:::\n\n```{.r .cell-code}\nma_map_df <- filter(states_map, region==\"massachusetts\")\nma_mutate <- ma_map_df %>%\n  mutate(\"coordinates\" = paste(lat, long))\ndata.frame(ma_mutate)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         long      lat group order        region         subregion\n1   -70.45089 41.40193    20  5926 massachusetts martha's vineyard\n2   -70.45662 41.39047    20  5927 massachusetts martha's vineyard\n3   -70.45662 41.37328    20  5928 massachusetts martha's vineyard\n4   -70.46808 41.35609    20  5929 massachusetts martha's vineyard\n5   -70.50819 41.35609    20  5930 massachusetts martha's vineyard\n6   -70.56548 41.34464    20  5931 massachusetts martha's vineyard\n7   -70.61704 41.34464    20  5932 massachusetts martha's vineyard\n8   -70.68008 41.34464    20  5933 massachusetts martha's vineyard\n9   -70.70872 41.33891    20  5934 massachusetts martha's vineyard\n10  -70.73737 41.33891    20  5935 massachusetts martha's vineyard\n11  -70.74310 41.32745    20  5936 massachusetts martha's vineyard\n12  -70.77747 41.31026    20  5937 massachusetts martha's vineyard\n13  -70.80039 41.30453    20  5938 massachusetts martha's vineyard\n14  -70.81758 41.31026    20  5939 massachusetts martha's vineyard\n15  -70.82904 41.32745    20  5940 massachusetts martha's vineyard\n16  -70.82904 41.34464    20  5941 massachusetts martha's vineyard\n17  -70.82331 41.35609    20  5942 massachusetts martha's vineyard\n18  -70.80613 41.35036    20  5943 massachusetts martha's vineyard\n19  -70.77747 41.34464    20  5944 massachusetts martha's vineyard\n20  -70.74310 41.37328    20  5945 massachusetts martha's vineyard\n21  -70.69726 41.43058    20  5946 massachusetts martha's vineyard\n22  -70.63997 41.47068    20  5947 massachusetts martha's vineyard\n23  -70.61704 41.47642    20  5948 massachusetts martha's vineyard\n24  -70.61131 41.47068    20  5949 massachusetts martha's vineyard\n25  -70.61704 41.44777    20  5950 massachusetts martha's vineyard\n26  -70.61131 41.44777    20  5951 massachusetts martha's vineyard\n27  -70.59413 41.44777    20  5952 massachusetts martha's vineyard\n28  -70.56548 41.45350    20  5953 massachusetts martha's vineyard\n29  -70.54829 41.44204    20  5954 massachusetts martha's vineyard\n30  -70.54829 41.40193    20  5955 massachusetts martha's vineyard\n31  -70.53111 41.39047    20  5956 massachusetts martha's vineyard\n32  -70.49673 41.39047    20  5957 massachusetts martha's vineyard\n33  -70.48527 41.40193    20  5958 massachusetts martha's vineyard\n34  -70.46808 41.41912    20  5959 massachusetts martha's vineyard\n35  -70.45662 41.41912    20  5960 massachusetts martha's vineyard\n36  -70.45089 41.40193    20  5961 massachusetts martha's vineyard\n37  -73.49902 42.04937    21  5963 massachusetts              main\n38  -73.50475 42.09521    21  5964 massachusetts              main\n39  -73.47610 42.17542    21  5965 massachusetts              main\n40  -73.41881 42.32439    21  5966 massachusetts              main\n41  -73.37870 42.45617    21  5967 massachusetts              main\n42  -73.35006 42.51347    21  5968 massachusetts              main\n43  -73.31568 42.59941    21  5969 massachusetts              main\n44  -73.27557 42.70255    21  5970 massachusetts              main\n45  -73.28130 42.74265    21  5971 massachusetts              main\n46  -73.02921 42.73692    21  5972 massachusetts              main\n47  -72.92606 42.73692    21  5973 massachusetts              main\n48  -72.47343 42.73119    21  5974 massachusetts              main\n49  -72.28436 42.72546    21  5975 massachusetts              main\n50  -71.93485 42.71400    21  5976 massachusetts              main\n51  -71.90047 42.71400    21  5977 massachusetts              main\n52  -71.74577 42.70255    21  5978 massachusetts              main\n53  -71.34470 42.69682    21  5979 massachusetts              main\n54  -71.31033 42.69682    21  5980 massachusetts              main\n55  -71.28168 42.71400    21  5981 massachusetts              main\n56  -71.26450 42.72546    21  5982 massachusetts              main\n57  -71.23584 42.73119    21  5983 massachusetts              main\n58  -71.21866 42.73119    21  5984 massachusetts              main\n59  -71.19573 42.73692    21  5985 massachusetts              main\n60  -71.19573 42.75984    21  5986 massachusetts              main\n61  -71.19573 42.78849    21  5987 massachusetts              main\n62  -71.17855 42.80568    21  5988 massachusetts              main\n63  -71.14417 42.81141    21  5989 massachusetts              main\n64  -71.08688 42.80568    21  5990 massachusetts              main\n65  -71.06968 42.81141    21  5991 massachusetts              main\n66  -71.04104 42.85725    21  5992 massachusetts              main\n67  -71.01239 42.86870    21  5993 massachusetts              main\n68  -70.90926 42.87443    21  5994 massachusetts              main\n69  -70.88634 42.87443    21  5995 massachusetts              main\n70  -70.84050 42.85725    21  5996 massachusetts              main\n71  -70.84623 42.81714    21  5997 massachusetts              main\n72  -70.85770 42.81141    21  5998 massachusetts              main\n73  -70.85770 42.79422    21  5999 massachusetts              main\n74  -70.83477 42.75984    21  6000 massachusetts              main\n75  -70.81758 42.71973    21  6001 massachusetts              main\n76  -70.82331 42.69682    21  6002 massachusetts              main\n77  -70.78320 42.68536    21  6003 massachusetts              main\n78  -70.77175 42.67963    21  6004 massachusetts              main\n79  -70.77175 42.64525    21  6005 massachusetts              main\n80  -70.72018 42.63952    21  6006 massachusetts              main\n81  -70.70299 42.62233    21  6007 massachusetts              main\n82  -70.69726 42.58796    21  6008 massachusetts              main\n83  -70.71445 42.57076    21  6009 massachusetts              main\n84  -70.76029 42.55930    21  6010 massachusetts              main\n85  -70.84623 42.55357    21  6011 massachusetts              main\n86  -70.87488 42.54212    21  6012 massachusetts              main\n87  -70.88634 42.52493    21  6013 massachusetts              main\n88  -70.88061 42.51347    21  6014 massachusetts              main\n89  -70.85770 42.50201    21  6015 massachusetts              main\n90  -70.85770 42.49628    21  6016 massachusetts              main\n91  -70.86915 42.47336    21  6017 massachusetts              main\n92  -70.93790 42.45617    21  6018 massachusetts              main\n93  -70.97228 42.45044    21  6019 massachusetts              main\n94  -70.99520 42.43325    21  6020 massachusetts              main\n95  -71.00093 42.41607    21  6021 massachusetts              main\n96  -71.00666 42.39888    21  6022 massachusetts              main\n97  -71.00093 42.37596    21  6023 massachusetts              main\n98  -71.02384 42.38169    21  6024 massachusetts              main\n99  -71.04677 42.37596    21  6025 massachusetts              main\n100 -71.04677 42.35877    21  6026 massachusetts              main\n101 -71.04677 42.34731    21  6027 massachusetts              main\n102 -71.04104 42.33585    21  6028 massachusetts              main\n103 -71.04677 42.31293    21  6029 massachusetts              main\n104 -71.04104 42.30148    21  6030 massachusetts              main\n105 -71.03531 42.27856    21  6031 massachusetts              main\n106 -71.02384 42.26137    21  6032 massachusetts              main\n107 -70.98947 42.23845    21  6033 massachusetts              main\n108 -70.96082 42.22699    21  6034 massachusetts              main\n109 -70.92645 42.23272    21  6035 massachusetts              main\n110 -70.91499 42.24418    21  6036 massachusetts              main\n111 -70.90926 42.25564    21  6037 massachusetts              main\n112 -70.89780 42.29002    21  6038 massachusetts              main\n113 -70.87488 42.26710    21  6039 massachusetts              main\n114 -70.84623 42.24991    21  6040 massachusetts              main\n115 -70.78893 42.23845    21  6041 massachusetts              main\n116 -70.73164 42.20407    21  6042 massachusetts              main\n117 -70.72591 42.18115    21  6043 massachusetts              main\n118 -70.73164 42.15250    21  6044 massachusetts              main\n119 -70.72018 42.13532    21  6045 massachusetts              main\n120 -70.66288 42.11240    21  6046 massachusetts              main\n121 -70.64570 42.09521    21  6047 massachusetts              main\n122 -70.63997 42.03791    21  6048 massachusetts              main\n123 -70.61704 42.02645    21  6049 massachusetts              main\n124 -70.61704 42.00927    21  6050 massachusetts              main\n125 -70.62278 42.00927    21  6051 massachusetts              main\n126 -70.64570 42.00927    21  6052 massachusetts              main\n127 -70.65143 42.02645    21  6053 massachusetts              main\n128 -70.67435 42.03218    21  6054 massachusetts              main\n129 -70.68581 42.03218    21  6055 massachusetts              main\n130 -70.70299 41.99781    21  6056 massachusetts              main\n131 -70.69154 41.97489    21  6057 massachusetts              main\n132 -70.66288 41.95197    21  6058 massachusetts              main\n133 -70.64570 41.94624    21  6059 massachusetts              main\n134 -70.60559 41.94624    21  6060 massachusetts              main\n135 -70.56548 41.93478    21  6061 massachusetts              main\n136 -70.55402 41.90614    21  6062 massachusetts              main\n137 -70.54829 41.82592    21  6063 massachusetts              main\n138 -70.53683 41.79727    21  6064 massachusetts              main\n139 -70.51392 41.78008    21  6065 massachusetts              main\n140 -70.47954 41.75716    21  6066 massachusetts              main\n141 -70.41078 41.73425    21  6067 massachusetts              main\n142 -70.33630 41.72279    21  6068 massachusetts              main\n143 -70.25608 41.73997    21  6069 massachusetts              main\n144 -70.17587 41.76289    21  6070 massachusetts              main\n145 -70.08993 41.78008    21  6071 massachusetts              main\n146 -70.04982 41.79727    21  6072 massachusetts              main\n147 -70.02690 41.82592    21  6073 massachusetts              main\n148 -70.02117 41.84884    21  6074 massachusetts              main\n149 -70.02690 41.91187    21  6075 massachusetts              main\n150 -70.04982 41.92332    21  6076 massachusetts              main\n151 -70.08420 41.91759    21  6077 massachusetts              main\n152 -70.08993 41.92905    21  6078 massachusetts              main\n153 -70.08993 41.96343    21  6079 massachusetts              main\n154 -70.08420 41.99781    21  6080 massachusetts              main\n155 -70.10712 42.02073    21  6081 massachusetts              main\n156 -70.13577 42.03791    21  6082 massachusetts              main\n157 -70.16441 42.04937    21  6083 massachusetts              main\n158 -70.18160 42.04937    21  6084 massachusetts              main\n159 -70.19879 42.03791    21  6085 massachusetts              main\n160 -70.21598 42.02645    21  6086 massachusetts              main\n161 -70.23317 42.03218    21  6087 massachusetts              main\n162 -70.25035 42.04937    21  6088 massachusetts              main\n163 -70.25035 42.06656    21  6089 massachusetts              main\n164 -70.23317 42.08375    21  6090 massachusetts              main\n165 -70.21024 42.08948    21  6091 massachusetts              main\n166 -70.16441 42.08375    21  6092 massachusetts              main\n167 -70.12431 42.06656    21  6093 massachusetts              main\n168 -70.08420 42.05510    21  6094 massachusetts              main\n169 -70.03263 42.00927    21  6095 massachusetts              main\n170 -69.99825 41.96343    21  6096 massachusetts              main\n171 -69.94669 41.85456    21  6097 massachusetts              main\n172 -69.95242 41.83165    21  6098 massachusetts              main\n173 -69.96387 41.82592    21  6099 massachusetts              main\n174 -69.97533 41.80873    21  6100 massachusetts              main\n175 -69.94669 41.79727    21  6101 massachusetts              main\n176 -69.94669 41.76862    21  6102 massachusetts              main\n177 -69.95815 41.74570    21  6103 massachusetts              main\n178 -69.96960 41.72279    21  6104 massachusetts              main\n179 -69.95815 41.67695    21  6105 massachusetts              main\n180 -69.94669 41.64257    21  6106 massachusetts              main\n181 -69.96387 41.59674    21  6107 massachusetts              main\n182 -69.98106 41.58527    21  6108 massachusetts              main\n183 -69.99253 41.59101    21  6109 massachusetts              main\n184 -69.99825 41.64257    21  6110 massachusetts              main\n185 -70.01544 41.65403    21  6111 massachusetts              main\n186 -70.04982 41.66549    21  6112 massachusetts              main\n187 -70.09566 41.65976    21  6113 massachusetts              main\n188 -70.13004 41.65403    21  6114 massachusetts              main\n189 -70.15868 41.65976    21  6115 massachusetts              main\n190 -70.18733 41.66549    21  6116 massachusetts              main\n191 -70.21024 41.65403    21  6117 massachusetts              main\n192 -70.25035 41.63111    21  6118 massachusetts              main\n193 -70.27901 41.64257    21  6119 massachusetts              main\n194 -70.33630 41.63111    21  6120 massachusetts              main\n195 -70.35349 41.62538    21  6121 massachusetts              main\n196 -70.38786 41.63111    21  6122 massachusetts              main\n197 -70.42797 41.62538    21  6123 massachusetts              main\n198 -70.43943 41.61966    21  6124 massachusetts              main\n199 -70.46235 41.57955    21  6125 massachusetts              main\n200 -70.49100 41.55090    21  6126 massachusetts              main\n201 -70.66288 41.54517    21  6127 massachusetts              main\n202 -70.66288 41.59101    21  6128 massachusetts              main\n203 -70.64570 41.63111    21  6129 massachusetts              main\n204 -70.65143 41.68841    21  6130 massachusetts              main\n205 -70.62851 41.71133    21  6131 massachusetts              main\n206 -70.62278 41.72279    21  6132 massachusetts              main\n207 -70.64570 41.73425    21  6133 massachusetts              main\n208 -70.67435 41.73997    21  6134 massachusetts              main\n209 -70.69726 41.74570    21  6135 massachusetts              main\n210 -70.72591 41.73997    21  6136 massachusetts              main\n211 -70.74310 41.71706    21  6137 massachusetts              main\n212 -70.77175 41.66549    21  6138 massachusetts              main\n213 -70.78893 41.64830    21  6139 massachusetts              main\n214 -70.81758 41.63111    21  6140 massachusetts              main\n215 -70.84050 41.61966    21  6141 massachusetts              main\n216 -70.85197 41.59674    21  6142 massachusetts              main\n217 -70.87488 41.59674    21  6143 massachusetts              main\n218 -70.89207 41.60819    21  6144 massachusetts              main\n219 -70.91499 41.60819    21  6145 massachusetts              main\n220 -70.96082 41.57955    21  6146 massachusetts              main\n221 -70.96082 41.56236    21  6147 massachusetts              main\n222 -70.95509 41.53371    21  6148 massachusetts              main\n223 -70.96082 41.52798    21  6149 massachusetts              main\n224 -70.99520 41.53371    21  6150 massachusetts              main\n225 -70.99520 41.51652    21  6151 massachusetts              main\n226 -71.00666 41.50506    21  6152 massachusetts              main\n227 -71.06396 41.49934    21  6153 massachusetts              main\n228 -71.08115 41.54517    21  6154 massachusetts              main\n229 -71.10979 41.53944    21  6155 massachusetts              main\n230 -71.13844 41.65403    21  6156 massachusetts              main\n231 -71.15562 41.68841    21  6157 massachusetts              main\n232 -71.16135 41.71706    21  6158 massachusetts              main\n233 -71.16709 41.74570    21  6159 massachusetts              main\n234 -71.20146 41.75143    21  6160 massachusetts              main\n235 -71.26450 41.75716    21  6161 massachusetts              main\n236 -71.32178 41.77435    21  6162 massachusetts              main\n237 -71.33897 41.79727    21  6163 massachusetts              main\n238 -71.34470 41.81446    21  6164 massachusetts              main\n239 -71.35044 41.91187    21  6165 massachusetts              main\n240 -71.37908 41.91187    21  6166 massachusetts              main\n241 -71.38481 41.98635    21  6167 massachusetts              main\n242 -71.39054 42.02645    21  6168 massachusetts              main\n243 -71.49368 42.02645    21  6169 massachusetts              main\n244 -71.78588 42.00927    21  6170 massachusetts              main\n245 -71.80308 42.03791    21  6171 massachusetts              main\n246 -72.10101 42.03218    21  6172 massachusetts              main\n247 -72.12966 42.03791    21  6173 massachusetts              main\n248 -72.50208 42.03791    21  6174 massachusetts              main\n249 -72.55364 42.03218    21  6175 massachusetts              main\n250 -72.74845 42.03791    21  6176 massachusetts              main\n251 -72.75991 42.00354    21  6177 massachusetts              main\n252 -72.81721 42.00927    21  6178 massachusetts              main\n253 -72.81721 42.03791    21  6179 massachusetts              main\n254 -73.01201 42.04364    21  6180 massachusetts              main\n255 -73.04066 42.04364    21  6181 massachusetts              main\n256 -73.49902 42.04937    21  6182 massachusetts              main\n257 -70.06128 41.27588    22  6184 massachusetts         nantucket\n258 -70.03836 41.28161    22  6185 massachusetts         nantucket\n259 -70.02117 41.29880    22  6186 massachusetts         nantucket\n260 -70.01544 41.31599    22  6187 massachusetts         nantucket\n261 -70.04409 41.31599    22  6188 massachusetts         nantucket\n262 -70.04982 41.32745    22  6189 massachusetts         nantucket\n263 -70.03263 41.35036    22  6190 massachusetts         nantucket\n264 -70.04982 41.37328    22  6191 massachusetts         nantucket\n265 -70.04409 41.38474    22  6192 massachusetts         nantucket\n266 -70.02690 41.38474    22  6193 massachusetts         nantucket\n267 -70.01544 41.37328    22  6194 massachusetts         nantucket\n268 -69.99253 41.34464    22  6195 massachusetts         nantucket\n269 -69.98679 41.31599    22  6196 massachusetts         nantucket\n270 -69.98679 41.31026    22  6197 massachusetts         nantucket\n271 -69.96960 41.28734    22  6198 massachusetts         nantucket\n272 -69.95242 41.27588    22  6199 massachusetts         nantucket\n273 -69.95242 41.25869    22  6200 massachusetts         nantucket\n274 -69.97533 41.25296    22  6201 massachusetts         nantucket\n275 -70.02117 41.24150    22  6202 massachusetts         nantucket\n276 -70.04982 41.24150    22  6203 massachusetts         nantucket\n277 -70.09566 41.25296    22  6204 massachusetts         nantucket\n278 -70.15295 41.25869    22  6205 massachusetts         nantucket\n279 -70.18160 41.25869    22  6206 massachusetts         nantucket\n280 -70.21024 41.27588    22  6207 massachusetts         nantucket\n281 -70.21024 41.28161    22  6208 massachusetts         nantucket\n282 -70.18160 41.28734    22  6209 massachusetts         nantucket\n283 -70.15295 41.29307    22  6210 massachusetts         nantucket\n284 -70.13004 41.29307    22  6211 massachusetts         nantucket\n285 -70.08993 41.27588    22  6212 massachusetts         nantucket\n286 -70.06128 41.27588    22  6213 massachusetts         nantucket\n                           coordinates\n1    41.401927947998 -70.4508895874023\n2   41.3904724121094 -70.4566192626953\n3   41.3732833862305 -70.4566192626953\n4   41.3560943603516 -70.4680786132812\n5    41.3560943603516 -70.508186340332\n6   41.3446350097656 -70.5654830932617\n7   41.3446350097656 -70.6170425415039\n8   41.3446350097656 -70.6800765991211\n9   41.3389053344727 -70.7087173461914\n10  41.3389053344727 -70.7373657226562\n11  41.3274459838867 -70.7430953979492\n12   41.3102569580078 -70.777473449707\n13  41.3045272827148 -70.8003921508789\n14  41.3102569580078 -70.8175811767578\n15  41.3274459838867 -70.8290405273438\n16  41.3446350097656 -70.8290405273438\n17  41.3560943603516 -70.8233108520508\n18  41.3503646850586 -70.8061294555664\n19   41.3446350097656 -70.777473449707\n20  41.3732833862305 -70.7430953979492\n21  41.4305801391602 -70.6972579956055\n22  41.4706840515137 -70.6399688720703\n23  41.4764175415039 -70.6170425415039\n24  41.4706840515137 -70.6113128662109\n25  41.4477653503418 -70.6170425415039\n26  41.4477653503418 -70.6113128662109\n27  41.4477653503418 -70.5941314697266\n28   41.453498840332 -70.5654830932617\n29  41.4420356750488 -70.5482940673828\n30   41.401927947998 -70.5482940673828\n31  41.3904724121094 -70.5311050415039\n32  41.3904724121094 -70.4967269897461\n33   41.401927947998 -70.4852676391602\n34   41.419116973877 -70.4680786132812\n35   41.419116973877 -70.4566192626953\n36   41.401927947998 -70.4508895874023\n37      42.049373626709 -73.4990234375\n38   42.0952110290527 -73.504753112793\n39   42.175422668457 -73.4761047363281\n40   42.324390411377 -73.4188079833984\n41  42.4561729431152 -73.3787002563477\n42  42.5134658813477 -73.3500595092773\n43  42.5994110107422 -73.3156814575195\n44  42.7025451660156 -73.2755737304688\n45  42.7426528930664 -73.2813034057617\n46  42.7369194030762 -73.0292053222656\n47  42.7369194030762 -72.9260635375977\n48  42.7311935424805 -72.4734268188477\n49  42.7254638671875 -72.2843551635742\n50  42.7140045166016 -71.9348526000977\n51  42.7140045166016 -71.9004745483398\n52  42.7025451660156 -71.7457733154297\n53  42.6968154907227 -71.3447036743164\n54  42.6968154907227 -71.3103332519531\n55  42.7140045166016 -71.2816772460938\n56  42.7254638671875 -71.2644958496094\n57    42.7311935424805 -71.23583984375\n58  42.7311935424805 -71.2186584472656\n59  42.7369194030762 -71.1957321166992\n60   42.759838104248 -71.1957321166992\n61  42.7884902954102 -71.1957321166992\n62  42.8056755065918 -71.1785507202148\n63    42.811408996582 -71.144172668457\n64  42.8056755065918 -71.0868759155273\n65   42.811408996582 -71.0696792602539\n66  42.8572463989258 -71.0410385131836\n67  42.8687019348145 -71.0123901367188\n68  42.8744316101074 -70.9092559814453\n69  42.8744316101074 -70.8863372802734\n70  42.8572463989258 -70.8404998779297\n71   42.817138671875 -70.8462295532227\n72   42.811408996582 -70.8576965332031\n73  42.7942199707031 -70.8576965332031\n74   42.759838104248 -70.8347702026367\n75  42.7197341918945 -70.8175811767578\n76  42.6968154907227 -70.8233108520508\n77      42.6853561401367 -70.783203125\n78  42.6796264648438 -70.7717514038086\n79  42.6452484130859 -70.7717514038086\n80   42.639518737793 -70.7201843261719\n81  42.6223297119141 -70.7029876708984\n82  42.5879554748535 -70.6972579956055\n83  42.5707626342773 -70.7144546508789\n84  42.5593032836914 -70.7602920532227\n85  42.5535736083984 -70.8462295532227\n86  42.5421180725098 -70.8748779296875\n87  42.5249290466309 -70.8863372802734\n88  42.5134658813477 -70.8806076049805\n89   42.502010345459 -70.8576965332031\n90   42.496280670166 -70.8576965332031\n91  42.4733619689941 -70.8691482543945\n92  42.4561729431152 -70.9379043579102\n93   42.4504432678223 -70.972282409668\n94  42.4332542419434 -70.9952011108398\n95  42.4160652160645 -71.0009307861328\n96  42.3988761901855 -71.0066604614258\n97  42.3759574890137 -71.0009307861328\n98  42.3816909790039 -71.0238418579102\n99  42.3759574890137 -71.0467681884766\n100  42.358772277832 -71.0467681884766\n101 42.3473091125488 -71.0467681884766\n102 42.3358535766602 -71.0410385131836\n103 42.3129348754883 -71.0467681884766\n104 42.3014755249023 -71.0410385131836\n105 42.2785568237305 -71.0353088378906\n106 42.2613677978516 -71.0238418579102\n107 42.2384490966797 -70.9894714355469\n108  42.2269897460938 -70.960823059082\n109 42.2327194213867 -70.9264450073242\n110 42.2441787719727 -70.9149856567383\n111 42.2556381225586 -70.9092559814453\n112 42.2900161743164 -70.8978042602539\n113 42.2670974731445 -70.8748779296875\n114 42.2499084472656 -70.8462295532227\n115  42.2384490966797 -70.788932800293\n116 42.2040710449219 -70.7316436767578\n117   42.18115234375 -70.7259140014648\n118 42.1525039672852 -70.7316436767578\n119 42.1353187561035 -70.7201843261719\n120 42.1124000549316 -70.6628799438477\n121 42.0952110290527 -70.6456985473633\n122 42.0379104614258 -70.6399688720703\n123 42.0264549255371 -70.6170425415039\n124 42.0092658996582 -70.6170425415039\n125 42.0092658996582 -70.6227798461914\n126 42.0092658996582 -70.6456985473633\n127 42.0264549255371 -70.6514282226562\n128 42.0321846008301 -70.6743469238281\n129 42.0321846008301 -70.6858062744141\n130 41.9978065490723 -70.7029876708984\n131  41.9748878479004 -70.691535949707\n132 41.9519729614258 -70.6628799438477\n133 41.9462394714355 -70.6456985473633\n134 41.9462394714355 -70.6055908203125\n135 41.9347801208496 -70.5654830932617\n136  41.906135559082 -70.5540237426758\n137 41.8259201049805 -70.5482940673828\n138 41.7972717285156 -70.5368347167969\n139  41.7800827026367 -70.513916015625\n140 41.7571640014648 -70.4795379638672\n141  41.734245300293 -70.4107818603516\n142   41.722785949707 -70.336296081543\n143 41.7399749755859 -70.2560806274414\n144 41.7628936767578 -70.1758728027344\n145 41.7800827026367 -70.0899276733398\n146 41.7972717285156 -70.0498199462891\n147 41.8259201049805 -70.0269012451172\n148 41.8488388061523 -70.0211715698242\n149  41.911865234375 -70.0269012451172\n150 41.9233207702637 -70.0498199462891\n151 41.9175910949707 -70.0841979980469\n152 41.9290542602539 -70.0899276733398\n153 41.9634284973145 -70.0899276733398\n154 41.9978065490723 -70.0841979980469\n155 42.0207252502441 -70.1071166992188\n156 42.0379104614258 -70.1357650756836\n157  42.049373626709 -70.1644058227539\n158  42.049373626709 -70.1816024780273\n159 42.0379104614258 -70.1987915039062\n160 42.0264549255371 -70.2159805297852\n161 42.0321846008301 -70.2331695556641\n162  42.049373626709 -70.2503509521484\n163 42.0665626525879 -70.2503509521484\n164 42.0837478637695 -70.2331695556641\n165 42.0894813537598 -70.2102432250977\n166 42.0837478637695 -70.1644058227539\n167 42.0665626525879 -70.1243057250977\n168  42.055103302002 -70.0841979980469\n169 42.0092658996582 -70.0326309204102\n170 41.9634284973145 -69.9982528686523\n171  41.854564666748 -69.9466934204102\n172 41.8316459655762 -69.9524230957031\n173 41.8259201049805 -69.9638748168945\n174 41.8087310791016 -69.9753341674805\n175 41.7972717285156 -69.9466934204102\n176 41.7686233520508 -69.9466934204102\n177 41.7457046508789 -69.9581451416016\n178  41.722785949707 -69.9696044921875\n179 41.6769485473633 -69.9581451416016\n180 41.6425743103027 -69.9466934204102\n181  41.596736907959 -69.9638748168945\n182 41.5852737426758 -69.9810638427734\n183  41.591007232666 -69.9925308227539\n184 41.6425743103027 -69.9982528686523\n185 41.6540298461914 -70.0154418945312\n186 41.6654891967773 -70.0498199462891\n187 41.6597633361816 -70.0956573486328\n188 41.6540298461914 -70.1300354003906\n189 41.6597633361816 -70.1586761474609\n190 41.6654891967773 -70.1873321533203\n191 41.6540298461914 -70.2102432250977\n192 41.6311111450195 -70.2503509521484\n193 41.6425743103027 -70.2790069580078\n194  41.6311111450195 -70.336296081543\n195 41.6253814697266 -70.3534927368164\n196 41.6311111450195 -70.3878631591797\n197 41.6253814697266 -70.4279708862305\n198 41.6196556091309 -70.4394302368164\n199 41.5795478820801 -70.4623489379883\n200 41.5508995056152 -70.4909973144531\n201 41.5451698303223 -70.6628799438477\n202  41.591007232666 -70.6628799438477\n203 41.6311111450195 -70.6456985473633\n204 41.6884078979492 -70.6514282226562\n205 41.7113265991211 -70.6285095214844\n206  41.722785949707 -70.6227798461914\n207  41.734245300293 -70.6456985473633\n208 41.7399749755859 -70.6743469238281\n209 41.7457046508789 -70.6972579956055\n210 41.7399749755859 -70.7259140014648\n211 41.7170562744141 -70.7430953979492\n212 41.6654891967773 -70.7717514038086\n213  41.6483001708984 -70.788932800293\n214 41.6311111450195 -70.8175811767578\n215 41.6196556091309 -70.8404998779297\n216  41.596736907959 -70.8519668579102\n217  41.596736907959 -70.8748779296875\n218 41.6081924438477 -70.8920669555664\n219 41.6081924438477 -70.9149856567383\n220  41.5795478820801 -70.960823059082\n221  41.5623550415039 -70.960823059082\n222 41.5337104797363 -70.9550933837891\n223  41.5279808044434 -70.960823059082\n224 41.5337104797363 -70.9952011108398\n225 41.5165214538574 -70.9952011108398\n226 41.5050621032715 -71.0066604614258\n227 41.4993362426758 -71.0639572143555\n228 41.5451698303223 -71.0811462402344\n229 41.5394401550293 -71.1097869873047\n230 41.6540298461914 -71.1384429931641\n231 41.6884078979492 -71.1556243896484\n232 41.7170562744141 -71.1613540649414\n233 41.7457046508789 -71.1670913696289\n234 41.7514343261719 -71.2014617919922\n235 41.7571640014648 -71.2644958496094\n236 41.7743530273438 -71.3217849731445\n237 41.7972717285156 -71.3389739990234\n238 41.8144607543945 -71.3447036743164\n239  41.911865234375 -71.3504409790039\n240  41.911865234375 -71.3790817260742\n241 41.9863471984863 -71.3848114013672\n242 42.0264549255371 -71.3905410766602\n243 42.0264549255371 -71.4936752319336\n244 42.0092658996582 -71.7858810424805\n245 42.0379104614258 -71.8030776977539\n246 42.0321846008301 -72.1010055541992\n247 42.0379104614258 -72.1296615600586\n248  42.0379104614258 -72.502082824707\n249 42.0321846008301 -72.5536422729492\n250 42.0379104614258 -72.7484512329102\n251 42.0035362243652 -72.7599105834961\n252 42.0092658996582 -72.8172073364258\n253 42.0379104614258 -72.8172073364258\n254  42.043643951416 -73.0120086669922\n255   42.043643951416 -73.040657043457\n256     42.049373626709 -73.4990234375\n257    41.27587890625 -70.061279296875\n258  41.281608581543 -70.0383605957031\n259 41.2987976074219 -70.0211715698242\n260 41.3159866333008 -70.0154418945312\n261 41.3159866333008 -70.0440902709961\n262 41.3274459838867 -70.0498199462891\n263 41.3503646850586 -70.0326309204102\n264 41.3732833862305 -70.0498199462891\n265 41.3847427368164 -70.0440902709961\n266 41.3847427368164 -70.0269012451172\n267 41.3732833862305 -70.0154418945312\n268 41.3446350097656 -69.9925308227539\n269 41.3159866333008 -69.9867935180664\n270 41.3102569580078 -69.9867935180664\n271 41.2873382568359 -69.9696044921875\n272   41.27587890625 -69.9524230957031\n273 41.2586898803711 -69.9524230957031\n274 41.2529640197754 -69.9753341674805\n275 41.2415008544922 -70.0211715698242\n276 41.2415008544922 -70.0498199462891\n277 41.2529640197754 -70.0956573486328\n278 41.2586898803711 -70.1529541015625\n279 41.2586898803711 -70.1816024780273\n280   41.27587890625 -70.2102432250977\n281  41.281608581543 -70.2102432250977\n282 41.2873382568359 -70.1816024780273\n283 41.2930679321289 -70.1529541015625\n284 41.2930679321289 -70.1300354003906\n285   41.27587890625 -70.0899276733398\n286    41.27587890625 -70.061279296875\n```\n:::\n\n```{.r .cell-code}\n# merge data \n\nmap_merge <- merge(ma_mutate, Boston_tidy_mutate, by=\"coordinates\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in as.data.frame(y): object 'Boston_tidy_mutate' not found\n```\n:::\n\n```{.r .cell-code}\n# remove if room_id is NA when merged with map data\n\nmap_merged <- map_merge %>% filter(!is.na(map_merge$room_id))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in filter(., !is.na(map_merge$room_id)): object 'map_merge' not found\n```\n:::\n\n```{.r .cell-code}\n# paste data onto map of MA\n\nmap <- ggplot(map_joined, aes(x=long, y=lat, group=group)) + geom_polygon(aes(fill = room_price, color = \"light pink\"))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in ggplot(map_joined, aes(x = long, y = lat, group = group)): object 'map_joined' not found\n```\n:::\n\n```{.r .cell-code}\nmap\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction (database = \"world\", regions = \".\", exact = FALSE, boundary = TRUE, \n    interior = TRUE, projection = \"\", parameters = NULL, orientation = NULL, \n    fill = FALSE, col = 1, plot = TRUE, add = FALSE, namesonly = FALSE, \n    xlim = NULL, ylim = NULL, wrap = FALSE, resolution = if (plot) 1 else 0, \n    type = \"l\", bg = par(\"bg\"), mar = c(4.1, 4.1, par(\"mar\")[3], \n        0.1), myborder = 0.01, namefield = \"name\", lforce = \"n\", \n    ...) \n{\n    if (resolution > 0 && !plot) \n        stop(\"must have plot=TRUE if resolution is given\")\n    if (!fill && !boundary && !interior) \n        stop(\"one of boundary and interior must be TRUE\")\n    doproj <- !missing(projection) || !missing(parameters) || \n        !missing(orientation)\n    if (doproj && !requireNamespace(\"mapproj\", quietly = TRUE)) {\n        stop(\"Please install the package 'mapproj' for projections.\")\n    }\n    coordtype <- maptype(database)\n    if (coordtype == \"unknown\") \n        stop(\"missing database or unknown coordinate type\")\n    if (doproj && coordtype != \"spherical\") \n        stop(paste(database, \"database is not spherical; projections not allowed\"))\n    if (length(wrap) >= 2 && !doproj && wrap[2] - wrap[1] != \n        360) \n        stop(\"The specified longitudes for wrapping are inconsistent, they should be 360 apart.\")\n    if (is.character(database)) \n        as.polygon = fill\n    else as.polygon <- TRUE\n    xlim_tmp <- if (length(wrap) >= 2) \n        NULL\n    else xlim\n    coord <- map.poly(database, regions, exact, xlim_tmp, ylim, \n        boundary, interior, fill, as.polygon, namefield = namefield)\n    if (is.na(coord$x[1])) \n        stop(\"first coordinate is NA. Bad map data?\")\n    if (length(wrap) >= 2) {\n        antarctica <- if (length(wrap) == 2) \n            -89.9\n        else wrap[3]\n        coord <- map.wrap.poly(coord, xlim = wrap[1:2], poly = fill, \n            antarctica = antarctica)\n    }\n    if (lforce == \"e\") {\n        coord <- map.clip.poly(coord, xlim, ylim, poly = fill)\n    }\n    if (plot) {\n        .map.range(coord$range)\n    }\n    if (doproj) {\n        nam <- coord$names\n        coord <- mapproj::mapproject(coord, projection = projection, \n            parameters = parameters, orientation = orientation)\n        coord$projection = projection\n        coord$parameters = parameters\n        coord$orientation = orientation\n        coord$names <- nam\n        if (!is.null(xlim) && !is.null(ylim) && lforce %in% c(\"s\", \n            \"l\")) {\n            prange <- mapproj::mapproject(x = rep(xlim, 2), y = rep(ylim, \n                each = 2))\n            if (lforce == \"s\") {\n                xlim <- c(max(prange$x[c(1, 3)]), min(prange$x[c(2, \n                  4)]))\n                ylim <- c(max(prange$y[c(1, 2)]), min(prange$y[c(3, \n                  4)]))\n            }\n            else {\n                xlim <- c(min(prange$x[c(1, 3)]), max(prange$x[c(2, \n                  4)]))\n                ylim <- c(min(prange$y[c(1, 2)]), max(prange$y[c(3, \n                  4)]))\n            }\n        }\n        if (plot && coord$error) \n            if (all(is.na(coord$x))) \n                stop(\"projection failed for all data\")\n            else warning(\"projection failed for some data\")\n    }\n    if (length(wrap) == 1 && wrap) \n        coord <- map.wrap(coord)\n    if (plot) {\n        if (!add) {\n            opar = par(bg = bg)\n            if (!par(\"new\")) \n                plot.new()\n            if (is.null(xlim) || (doproj && !(lforce %in% c(\"s\", \n                \"l\")))) \n                xrange <- range(coord$x, na.rm = TRUE)\n            else xrange <- xlim\n            if (is.null(ylim) || (doproj && !(lforce %in% c(\"s\", \n                \"l\")))) \n                yrange <- range(coord$y, na.rm = TRUE)\n            else yrange <- ylim\n            if (coordtype != \"spherical\" || doproj) {\n                aspect <- c(1, 1)\n            }\n            else aspect <- c(cos((mean(yrange) * pi)/180), 1)\n            d <- c(diff(xrange), diff(yrange)) * (1 + 2 * myborder) * \n                aspect\n            if (coordtype != \"spherical\" || doproj) {\n                plot.window(xrange, yrange, asp = 1/aspect[1])\n            }\n            else {\n                par(mar = mar)\n                p <- par(\"fin\") - as.vector(matrix(c(0, 1, 1, \n                  0, 0, 1, 1, 0), nrow = 2) %*% par(\"mai\"))\n                par(pin = p)\n                p <- par(\"pin\")\n                p <- d * min(p/d)\n                par(pin = p)\n                d <- d * myborder + ((p/min(p/d) - d)/2)/aspect\n                usr <- c(xrange, yrange) + rep(c(-1, 1), 2) * \n                  rep(d, c(2, 2))\n                par(usr = usr)\n            }\n            on.exit(par(opar))\n        }\n        if (type != \"n\") {\n            if (!as.polygon && resolution != 0) {\n                pin <- par(\"pin\")\n                usr <- par(\"usr\")\n                resolution <- resolution * min(diff(usr)[-2]/pin/100)\n                coord[c(\"x\", \"y\")] <- mapthin(coord, resolution)\n            }\n            if (fill) \n                polygon(coord, col = col, ...)\n            else lines(coord, col = col, type = type, ...)\n        }\n    }\n    class(coord) = \"map\"\n    value <- if (namesonly) \n        coord$names\n    else coord\n    if (plot) \n        invisible(value)\n    else value\n}\n<bytecode: 0x000002703a446250>\n<environment: namespace:maps>\n```\n:::\n:::\n\n\nI am having trouble pasting the data onto the map of Massachusetts. I will try using the 'sf()' function, as I'd like to zoom in on the map to just show Boston, as the data would be illegible if it the map is kept at its current scale. Once I successfully apply the code, I will adjust the aesthetics to reflect neighborhood, roomy type, and room price. I will continue to work on this for my final project.\n",
    "supporting": [
      "Caitlin-Rowley---HW3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}