---
title: "Challenge 7 Solutions"
author: "Caitlin Rowley"
description: "Visualizing Multiple Dimensions"
date: "11/04/2022"
format:
  html:
    toc: true
    code-copy: true
    code-tools: true
categories:
  - challenge_7
  - hotel_bookings
  - australian_marriage
  - air_bnb
  - eggs
  - abc_poll
  - faostat
  - usa_households
---

```{r}
#| label: setup
#| warning: false
#| message: false

library(tidyverse)
library(ggplot2)

knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
```

## Read in data

I am going to work with my data set for my final project, which is a data set from AirBnB.

```{r}
# read in data:

setwd("C:/Users/caitr/OneDrive/Documents/DACSS/601_Fall_2022/posts")
Boston <- read_csv("Boston AirBnB Data.csv")
```

## Tidy Data

```{r}
# look for duplicates
# look for missing values
# look for outliers - review how to clean
# remember na.rm=TRUE for calculations

# clean the data:

# At first glance, it seems as though there are no values in the column titled "neighbourhood_group." So, I will find all unique values within that column to determine whether it can be removed from my tidy data set.

unique(Boston[c("neighbourhood_group")])

# I now know that there is no data within this column. I will remove it from my data set.

Boston_tidy <- subset(Boston, select = -c(neighbourhood_group))

# I can see from viewing this data frame that there are no other columns that are absent any values, so I will move on to other tidying tasks.

# rename columns:

names(Boston_tidy) <- c('room_id', 'room_name', 'host_id', 'host_name', 'neighborhood', 'room_latitude', 'room_longitude', 'room_type', 'room_price', 'min_nights', 'number_reviews', 'last_review', 'reviews_per_month', 'host_listings', 'availability_next_365', 'number_reviews_LTM', 'room_license')

# find duplicates:

duplicates <- duplicated(Boston_tidy)

# reached "max.print", so I will increase the limit and identify if any values within the vector = TRUE:

options(max.print=999999)
duplicates["TRUE"]

# "TRUE" = NA, so I now know that there are no duplicates in my data set.

```

"Boston_tidy" represents AirBnB rental listing data for the city of Boston over the last twelve months. The data frame has 17 variables and 5,185 rows of data. Each row now represents one unique observation---or in this case, a unique rental listing---that includes data related to the following variables: (1) room/listing ID number, (2) name of the room/listing, (3) listing host ID number, (4) listing host name, (5) room/listing neighborhood, (6) room/listing latitude, (7) room/listing longitude, (8) type of room/listing, (9) room/listing price, (10) minimum number of nights for rent, (11) number of room/listing reviews, (12) most recent room/listing review, (13) number of room/listing reviews per month, (14) number host-specific listings, (15) room/listing availability over the next year, (16) number of reviews for room/listing over the past 12 months, and (17) room/listing licensure status.

## Mutate

Next, I will mutate variables (**please note that I've added 'print(head())' to the data frame to shorten the output, but it's not rendering**).

```{r}
# mutate lat and lon to create "room_coordinates"
# keep lat and lon columns for now

Boston_mutate <- Boston_tidy %>%
mutate("room_coordinates" = paste(room_latitude, room_longitude))
colnames(Boston_mutate)
```

Find median room prices:

```{r}
# find median room prices by neighborhood and room type:

Boston_median <- Boston_mutate%>%
  filter(room_price>0) %>%
  group_by(room_type, neighborhood)%>%
    summarize(median_price = median(room_price))
```

I will next move on to summary statistics. I will use the complete data set for this portion of code.

```{r}
# summary statistics for entire data set: 

summary.data.frame(Boston_mutate)

# change variables from character to numeric

Boston_mutate %>% 
  group_by(room_price, min_nights, number_reviews, host_listings, availability_next_365) %>% 
  summary()

# HAVING TROUBLE APPLYING 'SUMMARY()' TO MULTIPLE COLUMNS
# output shows summary, but for all variables, not just those included in list
```

I am having trouble applying the 'summary()' function to only select variables, so I will revisit this.

## Visualization with Multiple Dimensions

I will next generate visualizations with multiple dimensions.

```{r}

library(RColorBrewer)
library(ggtext)
library(ggplot2)

# generate stacked bar chart:

ggplot(Boston_median, aes(x=neighborhood, y=median_price, fill=neighborhood)) + geom_bar(stat="identity") +
    scale_fill_hue() +
theme_classic() +
theme(axis.text.x = element_markdown(angle=90, hjust=1))


```

This is interesting, but not a great way to visualize this data, as we don't get to see the distribution of data points. I will next generate a violin plot that omits outliers.

```{r}
# remove outliers:

is_outlier <- function(x) {
  return(x < quantile(x, 0.25) - 1.5 * IQR(x) | x > quantile(x, 0.75) + 1.5 * IQR(x))
}

Boston_trim <- Boston_mutate %>%
  filter(!is_outlier(room_price))

# create dataframe:

Boston_trim%>%
  filter(room_price>0, room_price<600) %>%
  group_by(room_type, neighborhood) 

# generate violin plot:

Boston_trim%>%
  ggplot(aes(x=room_type, y=room_price, fill=neighborhood)) + 
  geom_violin(width = 1, size = .5, 
              scale = "area",
              trim = TRUE)+
  coord_flip()+
  labs(x="Room Type", y="Room Price", title = "Price by Room Type and Neighborhood")


```

Given the number of neighborhoods, this is extremely difficult to read. I will use facet wrapping to adjust the visualization.

```{r}
# violin plot with facet wrapping:

Boston_trim %>% 
  ggplot(aes(x=neighborhood, y=room_price, fill=room_type)) + 
  geom_violin(width = 1, size = .5, 
              scale = "area",
              trim = FALSE)+
  facet_wrap(vars(neighborhood), scales = "free")+
  theme_bw()+
  labs(x="Neighborhood", y = "Price", fill= "Room Type", title = "Boston Airbnb Prices by Neighborhood and Room Type", subtitle= "2021")
```

I want to figure out how to adjust the scale of the violin plots themselves so that I can read the data. I have tried adjusting the scale in the facet wrapping code chunk, but that hasn't worked so far. I will continue working on this.

I will next generate a tree map. It won't be helpful in terms of visualizing prices, but I wanted to give it a shot as practice.

```{r}
install.packages("wesanderson")
library(wesanderson)
library(RColorBrewer)
install.packages("treemap")
library(treemap)
library(RColorBrewer)

# load color palette:

budapest <- wes_palette("GrandBudapest2", 4, type = "discrete")

# generate tree map:

Boston_median%>%
treemap(room_type,
        index= c("neighborhood", "room_type"),
        vSize = "median_price",
        type = "index",
        title = "Listing Price by Neighborhood and Room Type",
        overlap.labels = 0,
        palette = (budapest))
```
