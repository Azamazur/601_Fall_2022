---
title: "Homework 3"
author: "Theresa Szczepanski"
desription: "More data read in, wrangling, and pivoting"
date: "11/11/2022"
format:
  html:
    df-print: paged
    toc: true
    code-fold: true
    code-copy: true
    code-tools: true
categories:
  - Theresa_Szczepanski
  - hw3
  - MCAS_2022
  - MCAS_G9Science2022_ItemAnalysis
---

```{r}
#| label: setup
#| warning: false
#| message: false

library(tidyverse)
library(ggplot2)
library(lubridate)
library(readxl)
library(hrbrthemes)
library(viridis)

knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
```

##  MCAS_2022.csv 

::: panel-tabset
### Read in Data Set 1
To read in the `MCAS_2022` data, I used the following process:

- Filter out Student Names and then Read in the data
- Examine the summary
- Identify information to filter, mutate, and rename on the read in
- note variables that require further investigation

::: panel-tabset
### Filter, Rename, and Mutate on Read in


After examining the summary (see tab), I chose to 

**Filter**:

- _SchoolID_ : There are several variables that identify our school, I removed all
but one, `testschoolcode`.

- _StudentPrivacy_: I left the `sasid` variable which is a student identifier number,
but eliminated all values corresponding to students' names.

- `dis`: We are a charter school within our own unique district, therefore any 
"district level" data is identical to our "school level" data.


 
 
__Rename__

I currently have not renamed variables, but I have a list of variables for 
which I need to talk with my administration to access a key to understand what they represent.
Ideally, after this, I would put 

- an `E_` before all `ELA` MCAS student performance metric variables
- an `M_` before all `Math` MCAS student performance metric variables
- an `S_` before all `Science` MCAS student performance metric variables
- an `SI_` before all student demographic characteristic identifying variables

__Mutate__
 
 I left as __doubles__
 
 - variables that measured scores on specific MCAS items e.g., `mitem1`
 - variables that measured student growth percentiles (`sgp`)
 - variables that counted a student's years in the school system or state.
 
 Recode to __char__
 
 - variables that are __nominal__, e.g., `town`
 
 Refactor as __ord__
 
 - variables that are __ordinal__, e.g., `mperflev`.
 
 Recode to __date__
 
 - `dob` using lubridate.
 
 


```{r}
#Filter, rename variables, and mutate values of variables on read-in

MCAS_2022<-read_csv("_data/PrivateSpring2022_MCAS_full_preliminary_results_04830305.csv",
                    skip=1)%>%
  select(-c("sprp_dis", "sprp_sch", "sprp_dis_name", "sprp_sch_name", "sprp_orgtype",
  "schtype", "testschoolname", "yrsindis", "conenr_dis"))%>%

#Recode all nominal variables as characters
  mutate(testschoolcode = as.character(testschoolcode))%>%
  # mutate(sasid = as.character(sasid))%>%
  mutate(highneeds = as.character(highneeds))%>%
  mutate(lowincome = as.character(lowincome))%>%
  mutate(title1 = as.character(title1))%>%
  mutate(ever_EL = as.character(ever_EL))%>%
  mutate(EL = as.character(EL))%>%
  mutate(EL_FormerEL = as.character(EL_FormerEL))%>%
  mutate(FormerEL = as.character(FormerEL))%>%
  mutate(ELfirstyear = as.character(ELfirstyear))%>%
  mutate(IEP = as.character(IEP))%>%
  mutate(plan504 = as.character(plan504))%>%
  mutate(firstlanguage = as.character(firstlanguage))%>%
  mutate(nature0fdis = as.character(natureofdis))%>%
  mutate(spedplacement = as.character(spedplacement))%>%
  mutate(town = as.character(town))%>%
  mutate(ssubject = as.character(ssubject))%>%


#Recode all ordinal variable as factors

  mutate(grade = as.factor(grade))%>%
  mutate(levelofneed = as.factor(levelofneed))%>%
  mutate(eperf2 = recode_factor(eperf2,
                                   "E" = "E",
                                   "M" = "M",
                                   "PM" = "PM",
                                   "NM"= "NM",
                                  .ordered = TRUE))%>%
  mutate(eperflev = recode_factor(eperflev,
                                   "E" = "E",
                                   "M" = "M",
                                   "PM" = "PM",
                                   "NM"= "NM",
                                   "DNT" = "DNT",
                                   "ABS" = "ABS",
                                  .ordered = TRUE))%>%
    mutate(mperf2 = recode_factor(mperf2,
                                   "E" = "E",
                                   "M" = "M",
                                   "PM" = "PM",
                                   "NM"= "NM",
                                  .ordered = TRUE))%>%
  mutate(mperflev = recode_factor(mperflev,
                                   "E" = "E",
                                   "M" = "M",
                                   "PM" = "PM",
                                   "NM"= "NM",
                                   "INV" = "INV",
                                   "ABS" = "ABS",
                                  .ordered = TRUE))%>%

  # The science variables contain a mixture of legacy performance levels and
  # next generation performance levels which needs to be addressed in the ordering
  # of these factors.
  mutate(sperf2 = recode_factor(sperf2,
                                   "E" = "E",
                                   "M" = "M",
                                   "PM" = "PM",
                                   "NM"= "NM",
                                  .ordered = TRUE))%>%
  mutate(sperflev = recode_factor(sperflev,
                                   "E" = "E",
                                   "M" = "M",
                                   "PM" = "PM",
                                   "NM"= "NM",
                                   "INV" = "INV",
                                   "ABS" = "ABS",
                                  .ordered = TRUE))%>%
  #recode DOB using lubridate
  mutate(dob = mdy(dob,
  quiet = FALSE,
  tz = NULL,
  locale = Sys.getlocale("LC_TIME"),
  truncated = 0
))



view(MCAS_2022)

MCAS_2022

                                 


  
 
  

```


### Post Read In Summary

```{r}

# examine the summary to decide how to best set up our data frame

 print(summarytools::dfSummary(MCAS_2022,
                         varnumbers = FALSE,
                         plain.ascii  = FALSE,
                         style        = "grid",
                         graph.magnif = 0.70,
                        valid.col    = FALSE),
       method = 'render',
       table.classes = 'table-condensed')

```


:::

### Read in Data Set 2

To read in `MCAS_G9Science2022_ItemAnalysis`, I:

- Selected only the 9th Grade Physics Item Report
- Deleted an extra column from a cell merge
- refactored the `sitem` variable to prepare to join this data set to the Student 
performance data set.
- Added an s to the column names as a reminder that all of these columns relate to the Science exam.

```{r}
library(readxl)

# G9 Science Item analysis

MCAS_G9Science2022_ItemAnalysis<-read_excel("_data/2022MCASDepartmentalAnalysis.xlsx", sheet = "SG9Physics", skip = 1, col_names= c("sitem", "sType", "sReporting Category", "sStandard", "sItem Desc", "delete", "sItem Possible Points","RT Percent Points", "State Percent Points", "RT-State Diff")) %>%
                  select(!contains("delete"))%>%
                  filter(str_detect(sStandard, "HS"))%>%
                  mutate("sitem" = as.character(sitem))
  
   
#view(MCAS_G9Science2022_ItemAnalysis)
# use string r to fix the item #
MCAS_G9Science2022_ItemAnalysis<-
  separate(MCAS_G9Science2022_ItemAnalysis, sitem, c("sitem", "delete"))%>%
  select(!contains("delete"))%>%
  mutate(sitem =
           str_c("sitem", sitem))
  
        
  
                   
MCAS_G9Science2022_ItemAnalysis

view(MCAS_G9Science2022_ItemAnalysis)




```
```{r}
 ggplot(MCAS_G9Science2022_ItemAnalysis, aes(x=`State Percent Points`, y=`RT-State Diff`)) + 
     geom_point(size = 1, color="#69b3a2")+
 geom_smooth(method="lm",color="grey", size =.5 )+
  labs(title = "RT-State Diff by Difficulty Level to State", y = "RT-State Diff",
       x = "State Percent Points")

```

### Narrative Summary

From our `MCAS_2022` data frame summary, we can see that this data set
contains performance results from 495 students from [Rising Tide Charter Public School](https://risingtide.org/)
 on the Spring 2022 
[Massachusetts Comprehensive Assessment System (MCAS)](https://www.doe.mass.edu/mcas/default.html) 
tests.

For each student, there are values reported for 256 different variables which 
consist of information from four broad categories


- *Demographic characteristics* of 
the students themselves (e.g., race, gender, date of birth, town, grade level, 
years in school, years in Massachusetts, and low income, title1, IEP, 504m 
and EL status ). 

- *Key assessment features* including subject, test format, and
accommodations provided 



- *Performance metrics*: This includes a students score on individual item strands, 
e.g.,`mitem1`-`mitem42`. 
 

Our second data set, `MCAS_G9Science2022_ItemAnalysis` is 42 by 9 and consists of 
9 variables with information pertaining to the 2022 [HS Introductory Physics Item Report](https://profiles.doe.mass.edu/mcas/mcasitems2.aspx?grade=HS&subjectcode=PHY&linkid=23&orgcode=04830000&fycode=2022&orgtypecode=5&). The variables can be broken down into 2 categories:

 Details about a given test item: 
 - content `Reporting Category` (MF (motion and forces)
WA (waves), and EN (energy), 

- `Standard` from the Massachusetts Curriculum Framework, 

- `Item Description` providing the details of what was asked of students.

Summary Performance Metrics:

- Here you can see the percentage of points earned by students at Rising Tide on an item
vs. the percentage of points earned by students in Massachusetts.








### Tidy Data to Prep for Join

I am interested in analyzing the 9th Grade Science Performance. To do this, I will 
select a subset of our data frame. I selected:

- 9th Grade and 10th grade students (since a few 10th grade students also took the test)
- Scores on the 42 Science Items
- Demographic characteristics of the students.

Then I filtered out the 10th grade students who did not take the test

```{r}
G9ScienceMCAS_2022 <- select(MCAS_2022, contains("sitem"), gender, grade, yrsinsch,
                             race, IEP, `plan504`, sattempt)%>%
                            filter((grade == 9) & sattempt != "N")

G9ScienceMCAS_2022<-select(G9ScienceMCAS_2022, !(contains("43")|contains("44")|contains("45")))

  

view(G9ScienceMCAS_2022)
G9ScienceMCAS_2022

```

When I compared this data frame to the State reported analysis, the state analysis only contains 
68 students. To be able to use the state data, I thus filtered out our 10, 10th grade students and only looked at the performance of the 9th grade students. Notably, my data frame has 69 entries while the state is reporting data on only 68 students. I will have to investigate this further.

Since I will join this data frame with the `MCAS_G9Science2022_ItemAnalysis`, using `sitem` as the key, I need to pivot this data set longer.

```{r}
G9ScienceMCAS_2022<- pivot_longer(G9ScienceMCAS_2022, contains("sitem"), names_to = "sitem", values_to = "sitem_score")

view(G9ScienceMCAS_2022)
G9ScienceMCAS_2022

```

As expected, we now have 42 X 69 = 2898 rows. 









### Join Data

Now, we should be ready to join our data sets using `sitem` as the key. We should have a 
2,898 by (9 + 8) = 2,898 by 17 data frame.

```{r}
G9Science_StudentItem <- G9ScienceMCAS_2022 %>%
  left_join(MCAS_G9Science2022_ItemAnalysis, "sitem")%>%


view(G9Science_StudentItem)
G9Science_StudentItem

```

As expected, we now have a 2,898 \times 17 data frame.





### Analysis of Student Performance by Content Strands


RT State Difference by Reporting Category

- Did students perform better relative to the state in different content categories?

- Did students on plans perform differently relative to the state in different content
categories?

- What reporting categories were emphasized by the state?

```{r}
G9Science_Cat_Total<-MCAS_G9Science2022_ItemAnalysis%>%
  select(`sitem`, `sReporting Category`, `State Percent Points`, `RT-State Diff`)
view(G9Science_Cat_Total)

 ggplot(G9Science_Cat_Total, aes(x= `sReporting Category`, fill = `sReporting Category`))+
  geom_bar( alpha=0.9) 

 
  # #theme_minimal() +
  # labs(title = "Urbanization Level",
  #      subtitle = "Before",
  #      caption = "US Teacher and Principals Survey SY2017-2018", 
  #      y = "Number of Schools", 
  #      x = "Urbanization Level") 
  # #coord_flip()

```
Where were the most points lost relative to other students in the state?

```{r}

```

- How did students perform based on key words?

```{r}
view(MCAS_G9Science2022_ItemAnalysis)
G9Science_Cat_StateDiff<-MCAS_G9Science2022_ItemAnalysis%>%
  select(`sitem`, `sReporting Category`, `State Percent Points`, `RT-State Diff`)%>%
  group_by(`sReporting Category`)%>%
  summarise(avg_RT_State_Diff = mean(`RT-State Diff`, na.rm=TRUE),
            sd_RT_State_Diff = sd(`RT-State Diff`, na.rm=TRUE),
            med_RT_State_Diff = median(`RT-State Diff`, na.rm=TRUE),
            sum_RT_State_Diff = sum(`RT-State Diff`, na.rm=TRUE))

G9Science_Cat_MeanStateDiff<-G9Science_Cat_StateDiff%>%
   ggplot( aes(fill = `sReporting Category`, y=`avg_RT_State_Diff`, x=`sReporting Category`)) +
    geom_bar(position="dodge", stat="identity") +
  labs(subtitle ="All Students" ,
       y = "Average Percent Points Earned",
       x= "Item, Introductory Physics 2022 ",
       title = "Student Item Performance by Reporting Category",
      caption = "2022 HS Introductory Physics MCAS")+
       theme(axis.text.x=element_text(angle=60,hjust=1))

G9Science_Cat_TotalStateDiff<-G9Science_Cat_StateDiff%>%
   ggplot( aes(fill = `sReporting Category`, y=`sum_RT_State_Diff`, x=`sReporting Category`)) +
    geom_bar(position="dodge", stat="identity") +
  labs(subtitle ="All Students" ,
       y = "Percent Points Earned",
       x= "Item, Introductory Physics 2022 ",
       title = "Student Item Performance by Reporting Category",
      caption = "2022 HS Introductory Physics MCAS")+
       theme(axis.text.x=element_text(angle=60,hjust=1))

G9Science_Cat_MeanStateDiff
G9Science_Cat_TotalStateDiff
```


Box Plot to Visualize distribution
```{r}
G9Science_Cat_Box <-MCAS_G9Science2022_ItemAnalysis%>%
  select(`sitem`, `sReporting Category`, `State Percent Points`, `RT-State Diff`)%>%
  group_by(`sReporting Category`)%>%
  ggplot( aes(x=`sReporting Category`, y=`RT-State Diff`, fill=`sReporting Category`)) +
    geom_boxplot() +
    scale_fill_viridis(discrete = TRUE, alpha=0.6) +
    geom_jitter(color="black", size=0.1, alpha=0.9) +
    theme_ipsum() +
    theme(
      legend.position="none",
      plot.title = element_text(size=11)
    ) +
    ggtitle("G9 Introductory Physics School State Difference by Content Category") +
    xlab("")

G9Science_Cat_Box
```
```{r}
G9Science_Density <-MCAS_G9Science2022_ItemAnalysis%>%
  select(`sitem`, `sReporting Category`, `State Percent Points`, `RT-State Diff`)%>%
  ggplot(aes(x = `RT-State Diff`, color = `sReporting Category`, fill = `sReporting Category`)) + 
  geom_density( color="#e9ecef", alpha=0.9) +
  labs(title = "Introductory Physics MCAS",
       subtitle = "Percent Earned RT-State Diff",
       y = "Density",
       x = "RT-State Diff",
       caption = "2022") + 
  theme_minimal() +
  facet_wrap(vars(`sReporting Category`))

G9Science_Density
```

`
```{r}
G9Science_Histo <-MCAS_G9Science2022_ItemAnalysis%>%
  select(`sitem`, `sReporting Category`, `State Percent Points`, `RT-State Diff`)%>%
  ggplot(aes(x = `RT-State Diff`, color = `sReporting Category`, fill = `sReporting Category`)) + 
  geom_histogram( color="#e9ecef", alpha=0.9) +
  labs(title = "Introductory Physics MCAS",
       subtitle = "Percent Earned RT-State Diff",
       y = "frequency",
       x = "RT-State Diff",
       caption = "2022") + 
  theme_minimal() +
  facet_wrap(vars(`sReporting Category`))

G9Science_Histo
```



### Analysis of Student Performance by Difficulty Level 
Overall Difficutly level

```{r}
G9Science_Diff<-MCAS_G9Science2022_ItemAnalysis%>%
  select(`sitem`, `sReporting Category`, `State Percent Points`, `RT-State Diff`)%>%
  ggplot( aes(x=`State Percent Points`, y=`RT-State Diff`)) + 
     geom_point(size = 1, color="#69b3a2")+
 geom_smooth(method="lm",color="grey", size =.5 )+
  labs(title = "RT-State Diff by Difficulty Level to State", y = "RT-State Diff",
       x = "State Percent Points", caption = "IEP only")
G9Science_Diff

```


Consideration of the difficulty level and modifications.

  

```{r}
# G9 Science  IEP  Analysis By Difficulty
G9Science_IEP<-G9Science_StudentItem%>%
  select(gender, sitem, sitem_score, `sItem Desc`, `sItem Possible Points`, `State Percent Points`, IEP, `RT-State Diff`)%>%
  filter(IEP != 0)
  

G9Science_IEP%>%
   ggplot( aes(x=`State Percent Points`, y=`RT-State Diff`)) + 
     geom_point(size = 1, color="#69b3a2")+
 geom_smooth(method="lm",color="grey", size =.5 )+
  labs(title = "RT-State Diff by Difficulty Level to State", y = "RT-State Diff",
       x = "State Percent Points", caption = "IEP only")

```
To fix this, we need RT-State Diff to be filtered INVALID comparison

```{r}
# G9 Science Calculate  
G9Science_Calculate<-G9Science_StudentItem%>%
  select(gender, sitem, sitem_score, `sItem Desc`, `sItem Possible Points`, `State Percent Points`, IEP, `RT-State Diff`)%>%
  filter(str_detect(`sItem Desc`, "calculate|Calculate"))%>%
  filter(IEP == 0)%>%
  group_by(sitem)%>%
  summarise(avg_RT_State_Diff = mean(`RT-State Diff`, na.rm=TRUE),
            avg_StatePercent = mean(`State Percent Points`))
 
view(G9Science_Calculate)
    ggplot(G9Science_Calculate, aes(x=`avg_StatePercent`, y=`avg_RT_State_Diff`)) + 
      geom_point(size = 1, color="#69b3a2")+
  geom_smooth(method="lm",color="grey", size =.5 )+
   labs(title = "Itetms with Calculate RT-State Diff by Difficulty Level to State", y = "RT-State Diff",
        x = "State Percent Points")
```




:::







