---
title: "Homework2 Erika Nagai"
author: "Erika Nagai"
description: "Introduction to Visualization"
date: "10/12/2022"
format:
  html:
    toc: true
    code-copy: true
    code-tools: true
categories:
  - hw2
  - movie
  - gender
---

## Challenge Overview

-   Read in a dataset from the \_data folder in the course blog repository, or choose your own data. If you decide to use one of the datasets we have provided, please use a challenging dataset - check with us if you are not sure.Â 

-   Clean the data as needed using dplyr and related tidyverse packages.

-   Provide a narrative about the data set (look it up if you aren't sure what you have got) and the variables in your dataset, including what type of data each variable is. The goal of this step is to communicate in a visually appealing way to non-experts - not to replicate r-code.

-   Identify potential research questions that your dataset can help answer.

```{r}
# install libraries

library(tidyverse)
library(ggplot2)
library(stringr)
library(tidyr)
library(dplyr)
library(summarytools)
library(plyr)
library(lubridate)
library(ggridges)
```

## Read in a data

```{r}
movie = read_csv("_data/movies_metadata.csv")
```

This movie dataset was generated by Movielens, a (non-profit) movie review website (https://movielens.org/), and was obtained from the following Kaggle link. (https://www.kaggle.com/datasets/rounakbanik/the-movies-dataset?resource=download&select=movies_metadata.csv)

The movie dataset is contains 45466 movies with a released date between December 9th 1874 and December 16th 2020.

The data includes the information of genres, revenue, runtime, languages, status (released/in production etc...).

This dataset includes the following columns.

```{r}
colnames(movie)
```

The data type of each column is as follows.

```{r}
print(summarytools::dfSummary(movie),
      varnumbers = FALSE,
      plain.ascii  = FALSE,
      style        = "grid",
      graph.magnif = 0.80,
      valid.col    = FALSE,
      method = 'render',
      table.classes = 'table-condensed')
```


**NA values**
This dataset has several rows with NA values.
Many are missing `belong_to_collection`, which may make sense because most movies don't belong to any collection.

Missing the below values might affect data analysis:
`release_date` : especially because I want to analyze the trend over time
`imdb_id`: because I will use this ID to join other datasets.

For now, I don't delete or replace NA values, however it is important to note that there are several missing values.

```{r}
movie %>% select(everything()) %>%
  summarise_all(funs(sum(is.na(.)))) %>%
  t()
```




## Tidy data

The values in some certain columns such as "belongs_to_collection", "genres", "production_companies", "production_countries", "spoken_languages" are in a list format for example:

" \[{'id': XXXX, 'content(name/genre/title)': XXX}, {'id': XXXX, 'content(name/genre/title): XXX}\] "

```{r}
movie %>% select(c("belongs_to_collection", "genres", "production_companies", "production_countries", "spoken_languages"))
```

These columns include `[]` `{}` and `'` in their values so I made a function `remove_simbols` that removes these unnecessary symbols.

```{r}
remove_symbols <- function(x) {
  removed_x <- str_remove_all(x, "\\{|\\}|\\[|\\}|\\]|'|,|id|name|:| ")
  return(removed_x)
}
```

1.  Genres


Each film contains information on one or more (up to 8) genres in a single column. To organize the information, the multiple genres contained in `genre` are split by "\]," so that each genre is contained in eight new columns, genre1-genre8.

```{r}

# Separating the `genre` by "},"
movie <- movie %>% 
  separate(genres, c("genre1", "genre2", "genre3", "genre4", "genre5", "genre6", "genre7", "genre8"), "\\},", remove = FALSE)

# Remove unnecessary symbols from each columns
movie$genre1 <- remove_symbols(movie$genre1)
movie$genre2 <- remove_symbols(movie$genre2)
movie$genre3 <- remove_symbols(movie$genre3)
movie$genre4 <- remove_symbols(movie$genre4)
movie$genre5 <- remove_symbols(movie$genre5)
movie$genre6 <- remove_symbols(movie$genre6)
movie$genre7 <- remove_symbols(movie$genre7)
movie$genre8 <- remove_symbols(movie$genre8)

movie %>% select(genre1)
```

I managed to separate the genre information above. Now all values in `genrex` (x is a number from 1 to 8) has a value in the format of "number name of genre"

However, there are 2,445 observations whose genre value doesn't fit the above format.
Most of them don't have any genre assigned so their `genre1` values are empty (or blank.

```{r}
movie %>% filter(!str_detect(genre1, "^i"))
```
However, looking at them closely, there are three observations whose `genre` value doesn't follow the above format or NOT blank.

The values in these observations such as "Carousel Production" and "Aniplex" don't look like a name of genres but that of production studios.
Also their `original_title` values don't look like a title of movies but information of languages.
It seems like these observations were not correctly read in because their values in other columns look weird.

Since these observations are not reliable, I decided to delete theme from this dataset.

```{r}
movie %>% filter(!str_detect(genre1, "^[0-9]") &!str_detect(genre1, "^[ \t\n]*$")) %>% #^[ \t\n]*$ is a regular expression for blank.
  select(c(original_title, title, production_countries, genre1:genre8))

movie_clean1 <- movie %>% filter(!str_detect(genre1, "^[A-Z]"))
```


Genre information is more organized but is still not easy to be analyzed. Thus, I decided to make dummy variables of each genre.

For example, if movie A is categorized as "comedy" and "adventure", the line of movie A should have 1 in "comedy" column and "adventure" respectively and 0 in columns of other genres.

```{r}

#https://community.rstudio.com/t/creating-dummy-columns-based-on-multiple-columns/58145/3
movie_clean1 <- movie_clean1 %>% 
  pivot_longer(cols = matches("genre[1-9]")) %>%
  add_column(count = 1) %>%
  arrange(value) %>%
  filter(str_detect(value, "^[0-9]")) %>%
  mutate(value1 = str_replace_all(value, "[0-9]+", "")) %>%
  select(-c(value, name)) %>%
  arrange(title) %>%
  pivot_wider(
    names_from = value1, 
    values_from = count, 
    values_fill = list(count=0),
    values_fn = list(count = mean)) %>%
  arrange(title)
```

`production_countries`
The values in `production_countries` are written in the following way.
[{'iso_3166_1': 'abbreviation of country', 'name': 'full country name'}]


```{r}
movie_clean1$production_countries <- remove_symbols(movie_clean1$production_countries)
movie_clean1$production_countries <- str_extract(movie_clean1$production_countries,"(?<=_1)\\w{2}")
```

Now, the dataset is cleaner. Look at the summary again.

```{r}
print(summarytools::dfSummary(movie_clean1),
      varnumbers = FALSE,
      plain.ascii  = FALSE,
      style        = "grid",
      graph.magnif = 0.80,
      valid.col    = FALSE,
      method = 'render',
      table.classes = 'table-condensed')

```

## Exploratory Analysis

1. The number of released movies registered in movielens (https://movielens.org/)

```{r}
movie_clean1 %>%
  group_by(year = lubridate::year(release_date)) %>%
  dplyr::summarize(total_n = n()) %>%
  ggplot(aes(x=year, y=total_n)) + 
  geom_line() +
  labs(title = "The released date of movies registered at Imdb database",
       subtitle = "The number of registered movies each year is increasing from around 1920",
       caption = "Source https://movielens.org/")

```
2. The number of movies released by countries.
The top 5


```{r}
movie_clean1 %>% group_by(production_countries) %>%
  dplyr::summarize(
    Number = n(),
    cumulative_percentage = cumsum(Number)/sum(Number)*100
  ) %>%
  arrange(desc(Number))



  
```

