---
title: "Challenge 3"
author: "Theresa Szczepanski"
desription: "Tidy Data: Pivoting"
date: "09/22/2022"
format:
  html:
    df-print: paged
    toc: true
    code-fold: true
    code-copy: true
    code-tools: true
categories:
  - Theresa_Szczepanski
  - challenge_3
  - animal_weights
# - eggs
  - australian_marriage
#  - usa_households
#  - sce_labor
---

```{r}
#| label: setup
#| warning: false
#| message: false

library(tidyverse)
library(readr)

knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
```

## Challenge Overview

Today's challenge is to:

1.  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)
2.  identify what needs to be done to tidy the current data
3.  anticipate the shape of pivoted data
4.  pivot the data into tidy format using `pivot_longer`

::: panel-tabset
## Animal Weights ‚≠ê


### Read in data

Read in one (or more) of the following datasets, using the correct R package and command.

-   animal_weights.csv ‚≠ê



::: callout-tip
### Data Summaries
For this class, should I try to have a separate analysis file? I left the code of my walkthrough mental process here, but commented it out. Also, would it be appropriate to creat an "appendix" as the second "tab" on this html file; i.e., 2 tabs per data set (one for the write up and an appendix tab)?
:::
```{r}
animal_weights<-read_csv("_data/animal_weight.csv")
# used spec() to get a list of the column variables and see that the 16 different
# types of animals need to be grouped under a variable

# spec(animal_weights)

animal_weights

# Use this, if there were many more rows in the original file and identifying the number of areas were difficult
# animal_weights%>%
#  select(`IPCC Area`)%>%
#  n_distinct(.)

```

### Briefly describe the data

From inspection, we can see that the data consists of the weights (in kilograms) of 16 different types of (domesticated/farmed) animals in one of the 9 given [Intergovernmental Panel on Climate Change (IPCC)](https://www.ipcc.ch/) regions in the world.

### Anticipate the End Result

To tidy our data, we need to introduce a new grouping variable, `animal`, and then the 2 variables
`IPCC Area` and `animal` (our `names_to` variable in our pivot) will identify a unique case and the third column `weight_kg` (our `value_from` variable in our pivot) will store the value for a given case.




### Challenge: Describe the final dimensions

Our tidied dataframe will consist of $3$ columns and $9 * 16 = 144$ rows, i.e., a $144 \times 3$ dataframe, where the $16$ variable names for animals will move into the `animal` variable and the current values in those columns will move into the `weight_kg` variable to create our new dataframe.


```{r}
#existing rows/cases
nrow(animal_weights)

#existing columns/cases
ncol(animal_weights)

#expected rows/cases
nrow(animal_weights) * (ncol(animal_weights)-1)

# expected columns 
ncol(animal_weights)-16 + 2

```



### Challenge: Pivot the Chosen Data

Here is our checklist for a tidy dataframe:

- In our tidied dataframe, a new **case** is given by an animal and IPCC region.
- Each variable: `IPCC region` and `animal` has its own column.
- Each case has a corresponding value that appears in the `weight_kg` column.
- Each observation has its own row with the first two entries in the row determining
the case and the last entry in the row being the unique cell for the value of `weight_kg`.



```{r}
#| tbl-cap: Pivoted animal_weights
animal_weights <-tibble(animal_weights)
# Was line 155 needed? When do I need this?
animal_weights<-animal_weights %>%
    pivot_longer(c(2:17), names_to = "animal", values_to = "weight_kg")
  # pivot_longer(c(`Cattle - dairy`,`Cattle - non-dairy`,
  # Buffaloes,`Swine - market`,
  # `Swine - breeding`,
  # `Chicken - Broilers`,
  # `Chicken - Layers`,
  # Ducks,
  # Turkeys,
  # Sheep,
  # Goats,
  # Horses,
  # Asses,
  # Mules,
  # Camels,
  # Llamas), names_to = "animal", values_to = "weight_kg")
animal_weights

```


::: callout-tip
### Pivot using gather vs. pivot_longer

I also attempted to pivot using `gather` as seen in the tutorial video. However I received the error
**object Cattle - dairy not found **. I thought that my column names were incorrect, however, I copied the text from my `gather` call and was able to use it in a `select` call without an issue. I was able to use the column numbers rather than the names to fix it but am still not sure why I was having the issue. 

Assuming that I can use either `gather` or `pivot_longer` are there cases where one should one use `pivot` as opposed to `gather` and vice-versa?
:::

```{r}
 animal_weights_gather_test <-read_csv("_data/animal_weight.csv")

animal_weights_gather_test<- animal_weights_gather_test %>%
  gather(c(2:17), key = "animals", value = "weight_kg")
animal_weights_gather_test
```



Any additional comments?


## Australian Marriage ‚≠ê‚≠ê‚≠ê
### Read in data

Read in one (or more) of the following datasets, using the correct R package and command.

-   animal_weights.csv ‚≠ê
-   eggs_tidy.csv ‚≠ê‚≠ê or organiceggpoultry.xls ‚≠ê‚≠ê‚≠ê
-   australian_marriage\*.xls ‚≠ê‚≠ê‚≠ê
-   USA Households\*.xlsx ‚≠ê‚≠ê‚≠ê‚≠ê
-   sce_labor_chart_data_public.xlsx üåüüåüüåüüåüüåü

```{r}


```

### Briefly describe the data

Describe the data, and be sure to comment on why you are planning to pivot it to make it "tidy"

### Anticipate the End Result

The first step in pivoting the data is to try to come up with a concrete vision of what the end product *should* look like - that way you will know whether or not your pivoting was successful.

One easy way to do this is to think about the dimensions of your current data (tibble, dataframe, or matrix), and then calculate what the dimensions of the pivoted data should be.

Suppose you have a dataset with $n$ rows and $k$ variables. In our example, 3 of the variables are used to identify a case, so you will be pivoting $k-3$ variables into a longer format where the $k-3$ variable names will move into the `names_to` variable and the current values in each of those columns will move into the `values_to` variable. Therefore, we would expect $n * (k-3)$ rows in the pivoted dataframe!

### Example: find current and future data dimensions

Lets see if this works with a simple example.

```{r}
#| tbl-cap: Example

df<-tibble(country = rep(c("Mexico", "USA", "France"),2),
           year = rep(c(1980,1990), 3), 
           trade = rep(c("NAFTA", "NAFTA", "EU"),2),
           outgoing = rnorm(6, mean=1000, sd=500),
           incoming = rlogis(6, location=1000, 
                             scale = 400))
df

#existing rows/cases
nrow(df)

#existing columns/cases
ncol(df)

#expected rows/cases
nrow(df) * (ncol(df)-3)

# expected columns 
3 + 2
```

Or simple example has $n = 6$ rows and $k - 3 = 2$ variables being pivoted, so we expect a new dataframe to have $n * 2 = 12$ rows x $3 + 2 = 5$ columns.

### Challenge: Describe the final dimensions

Document your work here.

```{r}


```

Any additional comments?

### Pivot the Data

Now we will pivot the data, and compare our pivoted data dimensions to the dimensions calculated above as a "sanity" check.

### Example

```{r}
#| tbl-cap: Pivoted Example

df<-pivot_longer(df, col = c(outgoing, incoming),
                 names_to="trade_direction",
                 values_to = "trade_value")
df
```

Yes, once it is pivoted long, our resulting data are $12x5$ - exactly what we expected!

::: callout-note
### Challenge: Pivot the Chosen Data

Document your work here. What will a new "case" be once you have pivoted the data? How does it meet requirements for tidy data?

```{r}


```

Any additional comments?
:::



:::