---
title: "Caitlin Rowley - HW3"
author: "Caitlin Rowley"
date: 11/25/2022
editor: visual
---

```{r}

#| label: setup
#| warning: false
#| message: false

# install packages and load libraries:

install.packages("readr")
install.packages("readxl")

library(tidyverse)
library(readr)
library(readxl)
library(dplyr)

knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
```

## Read in Data

I selected a data set from the Inside AirBnB website, capturing data related to summary information and metrics for listings in Boston, MA.

```{r}
# read in dataset:

setwd("C:/Users/caitr/OneDrive/Documents/DACSS/601_Fall_2022/posts")
Boston <- read_csv("Boston AirBnB Data.csv")
```

## Tidy Data

I will now tidy the data to look for missing values and duplicates. I will also rename columns as needed.

```{r}
# look for duplicates
# look for missing values
# remember na.rm=TRUE for calculations

# At first glance, it seems as though there are no values in the column titled "neighbourhood_group." So, I will find all unique values within that column to determine whether it can be removed from my tidy data set.

unique(Boston[c("neighbourhood_group")])

# I now know that there is no data within this column. I will remove it from my data set.

Boston_tidy <- subset(Boston, select = -c(neighbourhood_group))

# I can see from viewing this data frame that there are no other columns that are absent any values, so I will move on to other tidying tasks.

# rename columns:

names(Boston_tidy) <- c('room_id', 'room_name', 'host_id', 'host_name', 'neighborhood', 'room_latitude', 'room_longitude', 'room_type', 'room_price', 'min_nights', 'number_reviews', 'last_review', 'reviews_per_month', 'host_listings', 'availability_next_365', 'number_reviews_LTM', 'room_license')

# find duplicates:

duplicates <- duplicated(Boston_tidy)

# reached "max.print", so I will increase the limit and identify if any values within the vector = TRUE:

options(max.print=999999)
duplicates["TRUE"]

```

## Summary of Data

"Boston_tidy" represents AirBnB rental listing data for the city of Boston over the last twelve months. The data frame has 17 variables and 5,185 rows of data. Each row now represents one unique observation---or in this case, a unique rental listing---that includes data related to the following variables: (1) room/listing ID number, (2) name of the room/listing, (3) listing host ID number, (4) listing host name, (5) room/listing neighborhood, (6) room/listing latitude, (7) room/listing longitude, (8) type of room/listing, (9) room/listing price, (10) minimum number of nights for rent, (11) number of room/listing reviews, (12) most recent room/listing review, (13) number of room/listing reviews per month, (14) number host-specific listings, (15) room/listing availability over the next year, (16) number of reviews for room/listing over the past 12 months, and (17) room/listing licensure status.

Some potential research questions include:

-   Which neighborhoods have the most expensive price per bed?

-   Which neighborhoods have the highest number of listings?

-   Which property types are listed most frequently?

-   What's the average listing price by property types?

-   What's the average price per bed price by property type?

-   What does the occupancy rate look like by neighborhood?

-   What factors affect the price the most?

-   Can the price be accurately predicted, given other information about the listing?

-   Is there a correlation between number of reviews and occupancy?

## Mutate

Next, I will mutate variables. I will start off by adding the variable "room_coordinates" to my overall data set. I think this may come in handy if I choose to use a map for visualization, as I may need to match coordinates between my data set and those included in mapping packages such as 'map_data().'

```{r}
# mutate lat and lon to create "room_coordinates"
# keep lat and lon columns for now

Boston_mutate <- Boston_tidy %>%
mutate("room_coordinates" = paste(room_latitude, room_longitude))
colnames(Boston_mutate)
```

## Summary Statistics

I will next create a subset of data that includes the new variable "median_price," which will only include room prices greater than \$0. This data set will also grouped by the original variables "room_type" and "neighborhood." This will be useful in terms of both summary statistics and visualization.

```{r}
# find median room prices by neighborhood and room type:

Boston_median <- Boston_mutate%>%
  filter(room_price>0) %>%
  group_by(room_type, neighborhood)%>%
    summarize(median_price = median(room_price))
print(head(Boston_median))

summary(Boston_median$median_price)
```

We can see from this data set that the highest median room price is \$750/night for a shared room in the Fenway neighborhood. The lowest median room price is \$10/night for a shared room in Charlestown.

I will next generate statistics related to room price, minimum number of nights per stay, number of reviews per room, and number of listings by host.

```{r}
# summary statistics for entire data set: 

summary.data.frame(Boston_mutate)

# summary statistics for particular group of variables:

Boston_mutate %>% 
  select(room_price, min_nights, number_reviews, host_listings, availability_next_365) %>% 
  summary()
```

**This summary indicates that \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_**

```{r}
# summary statistics for categorical variables:

Boston_id <- Boston_mutate%>%
  filter(host_id>1)%>%
  group_by(neighborhood)

print(Boston_id)
```

**SUMMARY\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_**

## Visualization with Multiple Dimensions

I will next focus on data visualization. I will first generate a bar chart portraying median room price by neighborhood.

```{r}
library(RColorBrewer)
library(ggtext)
library(ggplot2)

# generate bar chart:

ggplot(Boston_median, aes(x=neighborhood, y=median_price, fill=neighborhood)) + geom_bar(stat="identity") +
  scale_fill_hue() +
  theme_classic() +
  labs(x="Neighborhood",y="Median Price per Night", title = "Boston Airbnb Rental Prices by Neighborhood")+
  theme(axis.text.x = element_markdown(angle=90, hjust=1))
```

**SUMMARY\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_**

I will next generate a geom_point chart to visualize room price by neighborhood and room type. I will also apply a boxplot overlay to capture both the interquartile range and outliers. I will first need to exclude strong outliers

```{r}
# remove outliers:

is_outlier <- function(x) {
  return(x < quantile(x, 0.25) - 1.5 * IQR(x) | x > quantile(x, 0.75) + 1.5 * IQR(x))
}

Boston_outlier <- Boston_mutate %>%
  filter(!is_outlier(room_price))

# create dataframe:

Boston_outlier%>%
  filter(room_price>0, room_price<800) %>%
  group_by(room_type, neighborhood)

# generate geom_point chart
# facet wrap
# boxplot overlay

Boston_outlier%>%
 group_by(room_type, neighborhood)%>%
  ggplot(aes(x=neighborhood, y=room_price)) +
  geom_point(alpha=.08, size=3, color = "light pink")+
  facet_wrap("room_type")+
  labs(x="Neighborhood",y="Price per Night", title = "Boston Airbnb Rental Prices by Neighborhood and Room Type")+
  theme_light()+
  geom_boxplot()+
  theme(axis.text.x = element_markdown(angle = 90, hjust=1))
```

This is very difficult to read due to the number of neighborhoods, so I am going to apply the three variables (room price, room type, and neighborhood) to another visual. In the interim, I will display a simpler version of this geom_point chart without the facet wrap so that the visual only captures neighborhood and room price per night.

```{r}
Boston_outlier%>%
 group_by(room_type, neighborhood)%>%
  ggplot(aes(x=neighborhood, y=room_price)) +
  geom_point(alpha=.08, size=5, color = "light pink")+
  labs(x="Neighborhood",y="Price per Night", title = "Boston Airbnb Rental Prices by Neighborhood")+
  theme_light()+
  geom_boxplot()+
  theme(axis.text.x = element_markdown(angle = 90, hjust=1))
```

**SUMMARY\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_**

I will next visualize the data using a choropleth map. I will generate a map of the Boston area and apply data related to neighborhood, room price, and room type.

```{r}

library(maps)
library(viridisLite)
library(ggplot2)
library(tidyverse)

# generate map

states_map <- map_data("state")

ma_map <- filter(states_map, region=="massachusetts") %>%
ggplot(., aes(x=long, y=lat, group=group)) +
  geom_polygon(fill="white", color="black")
ma_map

# merge 'ma_map' and 'Boston_tidy' by coordinates

# mutate and rename columns

Boston_mutate %>%
  rename("coordinates" = "room_coordinates")

ma_map_df <- filter(states_map, region=="massachusetts")
ma_mutate <- ma_map_df %>%
  mutate("coordinates" = paste(lat, long))
data.frame(ma_mutate)

# merge data 

map_merge <- merge(ma_mutate, Boston_tidy_mutate, by="coordinates")

# remove if room_id is NA when merged with map data

map_merged <- map_merge %>% filter(!is.na(map_merge$room_id))

# paste data onto map of MA

map <- ggplot(map_joined, aes(x=long, y=lat, group=group)) + geom_polygon(aes(fill = room_price, color = "light pink"))
map
```

I am having trouble pasting the data onto the map of Massachusetts. I will try using the 'sf()' function, as I'd like to zoom in on the map to just show Boston, as the data would be illegible if it the map is kept at its current scale. Once I successfully apply the code, I will adjust the aesthetics to reflect neighborhood, roomy type, and room price. I will continue to work on this for my final project.
