---
title: "Challenge 3 with R"
author: "Kristin Abijaoude"
desription: "Tidy Data: Pivoting"
date: "09/25/2022"
format:
  html:
    toc: true
    code-fold: true
    code-copy: true
    code-tools: true
categories:
  - challenge_3
  - animal_weights
  - eggs
  - australian_marriage
  - usa_households
  - sce_labor
---

```{r}
#| label: setup
#| warning: false
#| message: false

library(tidyverse)

knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
```

Today, I will be tidying and pivoting eggs_tidy.csv.

```{r}
#| label: Reading the Dataset
library(tidyverse)
eggs<-read_csv("~/Documents/GitHub/Github Help/601_Fall_2022/posts/_data/eggs_tidy.csv")
```

```{r}
#| label: Return head of data frame
head(eggs)
```

Here, we get the first 6 rows of the dataset eggs_tidy.csv. From what I see, this dataset records the average price of eggs sold per carton in from 2004 to 2013.

```{r}
#| label:  Let's create a table, shall we?
table(eggs)
```

Okay, what a mess. This is difficult to read and interpret. Let's make it tidy first!

```{r}
as.data.frame.table(eggs)
```

That's even messier.

```{r}
as.matrix(eggs)
```

How about tibble?

```{r}
as_tibble(eggs)
```

```{r}
eggs %>%
  gather("large_half_dozen", "large_dozen", "extra_large_half_dozen", "extra_large_dozen", key = "Eggs Sold", value = "Price sold")
```

```{r}
#| label: tibbling
eggs_tibble<-tibble(eggs)

#| label: Existing rows
nrow(eggs_tibble)

#| Existing columns 
ncol(eggs_tibble)

#| expected rows/cases
nrow(eggs_tibble) * (ncol(eggs_tibble)-2)

#| expected columns
4
```
From there, I can expect the new amount of rows and columns for the eggs dataset. 

## Pivot the Data

```{r}
#| label: Tidying up Columns
eggs_new <- eggs %>%
  mutate("Large Half Dozen per Cart Sold" = large_half_dozen / 100,
         "Large Dozen per Cart Sold" = large_dozen / 100,
         "Extra Large Half Dozen per Cart Sold" = extra_large_half_dozen / 100,
         "Extra Large Dozen per Cart Sold" = extra_large_dozen / 100)

#| label: Replace Old Columns with New Ones
select(eggs_new,-c(large_half_dozen, large_dozen, extra_large_half_dozen, extra_large_dozen))
```

```{r}
eggs_pivot <- eggs%>%
  pivot_longer(cols=contains("large"),
               names_to = c("size", "quantity"),
               names_sep="_",
               values_to = "price"
  )
eggs_pivot
```

Okay, that's (sort of) better! As you can see, the larger the eggs are, the more expensive they will be. The same concept applies to quantity, obviously, but you get more bang for your buck.
