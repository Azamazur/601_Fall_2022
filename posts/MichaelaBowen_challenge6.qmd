---
title: "Challenge 6"
author: "Michaela Bowen"
description: "Visualizing Time and Relationships"
date: "10/25/2022"
format:
  html:
    toc: true
    code-copy: true
    code-tools: true
categories:
  - challenge_6
  - Inventory Transactions 9/22/22-10/20/22
---

```{r}
#| label: setup
#| warning: false
#| message: false

library(tidyverse)
library(ggplot2)
library(readxl)
library(lubridate)
library(scales)

knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
```

## Challenge Overview

Today's challenge is to:

1)  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)
2)  tidy data (as needed, including sanity checks)
3)  mutate variables as needed (including sanity checks)
4)  create at least one graph including time (evolution)
   - try to make them "publication" ready (optional)
   - Explain why you choose the specific graph type
5)  Create at least one graph depicting part-whole or flow relationships
   - try to make them "publication" ready (optional)
   - Explain why you choose the specific graph type



::: {.panel-tabset}
## Read in data

  

```{r, message = FALSE, warning= FALSE}
transactions_9_22_2022_10_20_2022_orig <- read_excel("_data/Inventory Transactions 9_22_2022-10_20_2022.xlsx", 
    skip = 5,
    col_names = c("pos_id","product","delete","patient_name","transaction_date","qty_sold","daily_allottment_oz","weight_grams","cost","price","owner_name","owner_location","vendor","sold_by","receipt_no","delete","delete","delete","delete","delete"))%>%
  filter(sold_by != "Michaela Bowen")%>%
  select(!contains("delete"))
```

### Briefly describe the data
The transactions data frame we are working with consists of the completed sales transaction at Resinate, Northampton Spanning from 9/22/2022 through 10/20/2022. There are 11,870 instances of 14 variables, meaning that nearly 12,000 items were sold during this time period, between nearly 3,600 transactions.Each instance is a product sold, rather than a complete transaction. All products were sold by 7 employees during this time. The variables describe the product type, category, date, patient name, receipt number, budtender, and other transaction information.


```{r}
#number of products sold
nrow(transactions_9_22_2022_10_20_2022_orig)

#number of transactions
n_distinct(transactions_9_22_2022_10_20_2022_orig$receipt_no)

#number of employees
n_distinct(transactions_9_22_2022_10_20_2022_orig$sold_by)

```


## Tidy Data

Here I will mutate columns to better suit the analysis of this data set. 

The columns I plant to mutate: 

- `date`: I am separating out this date column into hour, minute, and second in order to pin point time of day in which customers are ordering certain products
- `category`, `category_names`: I created these two variables from the 3 letter abbreviation at the beginning of the product name. This will aid in isolating specific categories of product rather than 
- `tier`: I am planning to create an ordinal column that has the Flower Tier Specification. A,B,C, and D describe the percentage of Total Active Canabinoids in each and thus determine their price.

```{r}
week1 <- interval(transactions_sept22_oct20_working$date[1],transactions_sept22_oct20_working$date[1] + days(7))
week2 <- interval(int_end(week1), int_end(week1) + days(7))
week3 <- interval(int_end(week2), int_end(week2) + days(7))
week4 <- interval(int_end(week3), int_end(week3) + days(7))

transactions_sept22_oct20_working <- transactions_9_22_2022_10_20_2022_orig%>%
#separating date, month, year, minute and second (thinking about removing second option, as it may not be useful)  
  mutate(
    date = as.Date(transaction_date),
    day = day(transaction_date),
    hour = hour(transaction_date),
    minute = minute(transaction_date),
    second = second(transaction_date))%>%
  mutate(
    format_date = format(date, "%m/%d/%Y"),
    format_hour = paste(hour, minute, second, sep = ":")
  )%>%
#pulling the category abbreviation to determine category and create a category column 
  mutate(
    category = substr(product,1,3)
  )%>%
#changing the abbreviations into full category names
  mutate(
    category_names = case_when(
      category == "FLO" ~ "Flower",
      category == "PRJ" ~ "Joint",
      category == "EDI" ~ "Edible",
      category == "MIP" ~ "Marijuana Infused Product",
      category == "CON" ~ "Concentrate",
      category == "VAP" ~ "Vaporizer",
      category == "ACC" | category == "Pax" | category == "Hig" | category == "Bov" ~ "Accessories",
      category == "CLO" | category == "Res" ~ "Clothing",
      category == "HTC" ~ "HTCC Promotion",
      category == "SAM" ~ "Samples",
      category == "TOP" ~ "Topical")
  )%>%
#created a logical variable to determine if flower was in house, or 3rd party
  mutate(
    house_product = if_else((vendor == "Resinate, Inc."), TRUE, FALSE, NA)
)%>%
  mutate(
   flower_tier = case_when(
     category_names == "Flower" & (price == 48 | price == 50) ~ "A Tier",
     category_names == "Flower" & price == 45 ~ "B Tier",
     category_names == "Flower" & price == 40 ~ "C Tier",
     category_names == "Flower" & (price == 30 | price == 35) ~ "D Tier"
   ) 
  )%>%
  extract(sold_by, c("FirstName", "LastName"), "([^ ]+) (.*)")%>%
  mutate(week = case_when(
    date %within% week1 ~ "week 1",
    date %within% week2 ~ "week 2",
    date %within% week3 ~ "week 3",
    date %within% week4 ~ "week 4",
  ))

    
```



## Time Dependent Visualization
```{r}
avg_salesby_budtender <- transactions_sept22_oct20_working%>%
  group_by(week,FirstName)%>%
  mutate(total_sales_week = sum(price))%>%
  mutate(avg_sale_week = total_sales_week/7)%>%
  distinct(FirstName, .keep_all = TRUE)%>%
  select(date, week, FirstName, avg_sale_week)%>%

ggplot(mapping = aes(x = week, y = avg_sale_week, group = FirstName, color = FirstName), size = 3) +
  geom_point() +
  theme(legend.title=element_blank(),axis.text.x = element_text(angle = 90, vjust = 0.5)) +
  ylab("Average Sales ($)") +
  xlab("Weeks 9/22/22 - 10/20/22")
  ggtitle("Average Sales by Budtender by Week")

avg_salesby_budtender
```


## Visualizing Part-Whole Relationships
:::
